ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	prompt
  20              		.data
  21              		.align	2
  22              		.type	prompt, %object
  23              		.size	prompt, 4
  24              	prompt:
  25 0000 01000000 		.word	1
  26              		.global	endFlag
  27              		.bss
  28              		.align	2
  29              		.type	endFlag, %object
  30              		.size	endFlag, 4
  31              	endFlag:
  32 0000 00000000 		.space	4
  33              		.global	oneDigit
  34              		.align	2
  35              		.type	oneDigit, %object
  36              		.size	oneDigit, 4
  37              	oneDigit:
  38 0004 00000000 		.space	4
  39              		.global	twoDigit
  40              		.align	2
  41              		.type	twoDigit, %object
  42              		.size	twoDigit, 4
  43              	twoDigit:
  44 0008 00000000 		.space	4
  45              		.global	error
  46              		.align	2
  47              		.type	error, %object
  48              		.size	error, 4
  49              	error:
  50 000c 00000000 		.space	4
  51              		.global	i
  52              		.data
  53              		.align	2
  54              		.type	i, %object
  55              		.size	i, 4
  56              	i:
  57 0004 02000000 		.word	2
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 2


  58              		.comm	count,2,2
  59              		.comm	lineStr,20,4
  60              		.comm	buffer,64,4
  61              		.global	data
  62              		.bss
  63              		.align	2
  64              		.type	data, %object
  65              		.size	data, 3
  66              	data:
  67 0010 000000   		.space	3
  68              		.section	.rodata
  69              		.align	2
  70              	.LC0:
  71 0000 20202020 		.ascii	"                    \000"
  71      20202020 
  71      20202020 
  71      20202020 
  71      20202020 
  72 0015 000000   		.align	2
  73              	.LC1:
  74 0018 48656C6C 		.ascii	"Hello\000"
  74      6F00
  75              		.section	.text.main,"ax",%progbits
  76              		.align	2
  77              		.global	main
  78              		.thumb
  79              		.thumb_func
  80              		.type	main, %function
  81              	main:
  82              	.LFB64:
  83              		.file 1 "main.c"
   1:main.c        **** /*******************************************************************************
   2:main.c        **** * File Name: main.c
   3:main.c        **** * Editer: Stephanie Salazar
   4:main.c        **** * Created: 5/12/18
   5:main.c        **** * Revision: 5/15/18
   6:main.c        **** *
   7:main.c        **** * Description:
   8:main.c        **** *   Receives data from the hyper terminal up to MAX_CRABS.
   9:main.c        **** *   FSK is then started using the input data and then prompts the user for
  10:main.c        **** *   more data. The LCD Display shows the number of crabs sent.
  11:main.c        **** *
  12:main.c        **** * This code was taken from PSoC's USBFS_UART example code and edited to store
  13:main.c        **** * a number for sending to another PSoC
  14:main.c        **** *
  15:main.c        **** ********************************************************************************
  16:main.c        **** * Description:
  17:main.c        **** *   The component is enumerated as a Virtual Com port. Receives data from the 
  18:main.c        **** *   hyper terminal, then sends back the received data.
  19:main.c        **** *   For PSoC3/PSoC5LP, the LCD shows the line settings.
  20:main.c        **** *
  21:main.c        **** * Related Document:
  22:main.c        **** *  Universal Serial Bus Specification Revision 2.0
  23:main.c        **** *  Universal Serial Bus Class Definitions for Communications Devices
  24:main.c        **** *  Revision 1.2
  25:main.c        **** *
  26:main.c        **** ********************************************************************************
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 3


  27:main.c        **** * Copyright 2015, Cypress Semiconductor Corporation. All rights reserved.
  28:main.c        **** * This software is owned by Cypress Semiconductor Corporation and is protected
  29:main.c        **** * by and subject to worldwide patent and copyright laws and treaties.
  30:main.c        **** * Therefore, you may use this software only as provided in the license agreement
  31:main.c        **** * accompanying the software package from which you obtained this software.
  32:main.c        **** * CYPRESS AND ITS SUPPLIERS MAKE NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  33:main.c        **** * WITH REGARD TO THIS SOFTWARE, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
  34:main.c        **** * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  35:main.c        **** ********************************************************************************
  36:main.c        **** */
  37:main.c        **** 
  38:main.c        **** 
  39:main.c        **** #include <project.h>
  40:main.c        **** #include "stdio.h"
  41:main.c        **** #include "stdlib.h"
  42:main.c        **** 
  43:main.c        **** #define USBFS_DEVICE    (0u)
  44:main.c        **** 
  45:main.c        **** /* The buffer size is equal to the maximum packet size of the IN and OUT bulk
  46:main.c        **** * endpoints.
  47:main.c        **** */
  48:main.c        **** #define USBUART_BUFFER_SIZE (64u)
  49:main.c        **** #define LINE_STR_LENGTH     (20u)
  50:main.c        **** /* Change data size for sending longer data (n-1) */
  51:main.c        **** #define DATA_SIZE           (7u)
  52:main.c        **** /* Change max crabs to correlate with data size 2^(n) - 1 */
  53:main.c        **** #define MAX_CRABS           (127)
  54:main.c        **** /* Error used for user error */
  55:main.c        **** #define ERROR               (333u)
  56:main.c        **** 
  57:main.c        **** #define ZERO 0x0
  58:main.c        **** #define ONE 0x1
  59:main.c        **** #define TRUE 0x1
  60:main.c        **** #define FALSE 0x0
  61:main.c        **** #define DATA_LENGTH 4
  62:main.c        **** #define DECODE_VALUE 0x01
  63:main.c        **** //
  64:main.c        **** #define PREFIX_BIT_LENGTH 6
  65:main.c        **** #define PREFIX_MESSAGE 0xFF
  66:main.c        **** 
  67:main.c        **** /*Function Prototypes*/
  68:main.c        **** int GetCrabs(void);
  69:main.c        **** int CalculateCrabs(void);
  70:main.c        **** void DisplayCrabs(int);
  71:main.c        **** 
  72:main.c        **** /*Global Variables*/
  73:main.c        **** int prompt = 1;
  74:main.c        **** int endFlag = 0; // flag for end of user input
  75:main.c        **** int oneDigit = 0; // flag for end of input with one character
  76:main.c        **** int twoDigit = 0; // flag for end of input with two characters
  77:main.c        **** int error = 0; // flag for input error
  78:main.c        **** int i = 2; // to iterate through data array
  79:main.c        **** uint16 count;
  80:main.c        **** char8 lineStr[LINE_STR_LENGTH];
  81:main.c        **** uint8 buffer[USBUART_BUFFER_SIZE];
  82:main.c        **** uint8 data[3] = {0};
  83:main.c        **** 
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 4


  84:main.c        **** 
  85:main.c        **** /*******************************************************************************
  86:main.c        **** * Function Name: main
  87:main.c        **** ********************************************************************************
  88:main.c        **** */
  89:main.c        **** int main()
  90:main.c        **** {
  84              		.loc 1 90 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 8
  87              		@ frame_needed = 1, uses_anonymous_args = 0
  88 0000 80B5     		push	{r7, lr}
  89              		.cfi_def_cfa_offset 8
  90              		.cfi_offset 7, -8
  91              		.cfi_offset 14, -4
  92 0002 82B0     		sub	sp, sp, #8
  93              		.cfi_def_cfa_offset 16
  94 0004 00AF     		add	r7, sp, #0
  95              		.cfi_def_cfa_register 7
  91:main.c        ****     int crabs = 0;
  96              		.loc 1 91 0
  97 0006 0023     		movs	r3, #0
  98 0008 7B60     		str	r3, [r7, #4]
  92:main.c        ****     int gettingData = TRUE;
  99              		.loc 1 92 0
 100 000a 0123     		movs	r3, #1
 101 000c 3B60     		str	r3, [r7]
  93:main.c        **** 
  94:main.c        ****     CyGlobalIntEnable; /* Enable global interrupts. */
 102              		.loc 1 94 0
 103              		.syntax unified
 104              	@ 94 "main.c" 1
 105 000e 62B6     		CPSIE   i
 106              	@ 0 "" 2
  95:main.c        ****     /*Block initializations*/
  96:main.c        ****     LCD_Start();
 107              		.loc 1 96 0
 108              		.thumb
 109              		.syntax unified
 110 0010 FFF7FEFF 		bl	LCD_Start
  97:main.c        **** 
  98:main.c        ****     /* Start USBFS operation with 5-V operation. */
  99:main.c        ****     USBUART_Start(USBFS_DEVICE, USBUART_5V_OPERATION);
 111              		.loc 1 99 0
 112 0014 0121     		movs	r1, #1
 113 0016 0020     		movs	r0, #0
 114 0018 FFF7FEFF 		bl	USBUART_Start
 100:main.c        ****     UART_Start();           /* Start communication component */
 115              		.loc 1 100 0
 116 001c FFF7FEFF 		bl	UART_Start
 101:main.c        **** 
 102:main.c        ****     /* Clear LCD line. */
 103:main.c        ****     LCD_Position(0u, 0u);
 117              		.loc 1 103 0
 118 0020 0021     		movs	r1, #0
 119 0022 0020     		movs	r0, #0
 120 0024 FFF7FEFF 		bl	LCD_Position
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 5


 104:main.c        ****     LCD_PrintString("                    ");
 121              		.loc 1 104 0
 122 0028 1448     		ldr	r0, .L6
 123 002a FFF7FEFF 		bl	LCD_PrintString
 105:main.c        **** 
 106:main.c        ****     /* Output string on LCD. */
 107:main.c        ****     LCD_Position(0u, 0u);
 124              		.loc 1 107 0
 125 002e 0021     		movs	r1, #0
 126 0030 0020     		movs	r0, #0
 127 0032 FFF7FEFF 		bl	LCD_Position
 108:main.c        ****     LCD_PrintString("Hello");
 128              		.loc 1 108 0
 129 0036 1248     		ldr	r0, .L6+4
 130 0038 FFF7FEFF 		bl	LCD_PrintString
 131              	.L5:
 109:main.c        ****     
 110:main.c        **** 
 111:main.c        ****     for(;;)
 112:main.c        ****     {
 113:main.c        ****         gettingData = 1;
 132              		.loc 1 113 0
 133 003c 0123     		movs	r3, #1
 134 003e 3B60     		str	r3, [r7]
 114:main.c        ****         /* Start UART interface and fill array with 3 parameters until valid */
 115:main.c        ****         while(gettingData){
 135              		.loc 1 115 0
 136 0040 12E0     		b	.L2
 137              	.L4:
 116:main.c        ****             while(0u == GetCrabs()){
 138              		.loc 1 116 0
 139 0042 00BF     		nop
 140              	.L3:
 141              		.loc 1 116 0 is_stmt 0 discriminator 1
 142 0044 FFF7FEFF 		bl	GetCrabs
 143 0048 0346     		mov	r3, r0
 144 004a 002B     		cmp	r3, #0
 145 004c FAD0     		beq	.L3
 117:main.c        ****             };
 118:main.c        ****             crabs = CalculateCrabs();
 146              		.loc 1 118 0 is_stmt 1
 147 004e FFF7FEFF 		bl	CalculateCrabs
 148 0052 7860     		str	r0, [r7, #4]
 119:main.c        ****             if(crabs != ERROR){
 149              		.loc 1 119 0
 150 0054 7B68     		ldr	r3, [r7, #4]
 151 0056 40F24D12 		movw	r2, #333
 152 005a 9342     		cmp	r3, r2
 153 005c 04D0     		beq	.L2
 120:main.c        ****                 DisplayCrabs(crabs);
 154              		.loc 1 120 0
 155 005e 7868     		ldr	r0, [r7, #4]
 156 0060 FFF7FEFF 		bl	DisplayCrabs
 121:main.c        ****                 gettingData = 0;
 157              		.loc 1 121 0
 158 0064 0023     		movs	r3, #0
 159 0066 3B60     		str	r3, [r7]
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 6


 160              	.L2:
 115:main.c        ****             while(0u == GetCrabs()){
 161              		.loc 1 115 0
 162 0068 3B68     		ldr	r3, [r7]
 163 006a 002B     		cmp	r3, #0
 164 006c E9D1     		bne	.L4
 122:main.c        ****                 }
 123:main.c        ****             }
 124:main.c        ****             UART_WriteTxData(crabs);
 165              		.loc 1 124 0
 166 006e 7B68     		ldr	r3, [r7, #4]
 167 0070 DBB2     		uxtb	r3, r3
 168 0072 1846     		mov	r0, r3
 169 0074 FFF7FEFF 		bl	UART_WriteTxData
 125:main.c        ****     } // end for(;;)
 170              		.loc 1 125 0
 171 0078 E0E7     		b	.L5
 172              	.L7:
 173 007a 00BF     		.align	2
 174              	.L6:
 175 007c 00000000 		.word	.LC0
 176 0080 18000000 		.word	.LC1
 177              		.cfi_endproc
 178              	.LFE64:
 179              		.size	main, .-main
 180              		.section	.rodata
 181 001e 0000     		.align	2
 182              	.LC2:
 183 0020 506C6561 		.ascii	"Please enter amount of crabs (up to 127). Terminate"
 183      73652065 
 183      6E746572 
 183      20616D6F 
 183      756E7420 
 184 0053 73207769 		.ascii	"s with carriage return or third character. Any non-"
 184      74682063 
 184      61727269 
 184      61676520 
 184      72657475 
 185 0086 696E7465 		.ascii	"integer will be interpreted as a 0.\000"
 185      67657220 
 185      77696C6C 
 185      20626520 
 185      696E7465 
 186 00aa 0000     		.align	2
 187              	.LC3:
 188 00ac 3000     		.ascii	"0\000"
 189 00ae 0000     		.align	2
 190              	.LC4:
 191 00b0 0D00     		.ascii	"\015\000"
 192              		.section	.text.GetCrabs,"ax",%progbits
 193              		.align	2
 194              		.global	GetCrabs
 195              		.thumb
 196              		.thumb_func
 197              		.type	GetCrabs, %function
 198              	GetCrabs:
 199              	.LFB65:
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 7


 126:main.c        **** } // end main
 127:main.c        **** 
 128:main.c        **** 
 129:main.c        **** /*******************************************************************************************
 130:main.c        ****  * function: int GetCrabs()
 131:main.c        ****  * parameters: hex_value - an 8 bit (1 byte) value specifying what data you want to send
 132:main.c        ****  *             bT - the current bit time
 133:main.c        ****  * returns: bitCase - a high or low signal to be sent to an output pin
 134:main.c        ****  * description: This function starts UART interface and waits for a valid amount of crabs
 135:main.c        ****  * entered by user
 136:main.c        ****  *******************************************************************************************
 137:main.c        ****  */
 138:main.c        **** int GetCrabs()
 139:main.c        **** {
 200              		.loc 1 139 0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 8
 203              		@ frame_needed = 1, uses_anonymous_args = 0
 204 0000 90B5     		push	{r4, r7, lr}
 205              		.cfi_def_cfa_offset 12
 206              		.cfi_offset 4, -12
 207              		.cfi_offset 7, -8
 208              		.cfi_offset 14, -4
 209 0002 83B0     		sub	sp, sp, #12
 210              		.cfi_def_cfa_offset 24
 211 0004 00AF     		add	r7, sp, #0
 212              		.cfi_def_cfa_register 7
 140:main.c        ****     uint16 crabs = 0;
 213              		.loc 1 140 0
 214 0006 0023     		movs	r3, #0
 215 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 141:main.c        ****     /* Host can send double SET_INTERFACE request. */
 142:main.c        ****     if (0u != USBUART_IsConfigurationChanged())
 216              		.loc 1 142 0
 217 000a FFF7FEFF 		bl	USBUART_IsConfigurationChanged
 218 000e 0346     		mov	r3, r0
 219 0010 002B     		cmp	r3, #0
 220 0012 06D0     		beq	.L9
 143:main.c        ****     {
 144:main.c        ****         /* Initialize IN endpoints when device is configured. */
 145:main.c        ****         if (0u != USBUART_GetConfiguration())
 221              		.loc 1 145 0
 222 0014 FFF7FEFF 		bl	USBUART_GetConfiguration
 223 0018 0346     		mov	r3, r0
 224 001a 002B     		cmp	r3, #0
 225 001c 01D0     		beq	.L9
 146:main.c        ****         {
 147:main.c        ****             /* Enumeration is done, enable OUT endpoint to receive data 
 148:main.c        ****             * from host. */
 149:main.c        ****             USBUART_CDC_Init();
 226              		.loc 1 149 0
 227 001e FFF7FEFF 		bl	USBUART_CDC_Init
 228              	.L9:
 150:main.c        ****             }
 151:main.c        ****         }
 152:main.c        ****         
 153:main.c        ****         /* Service USB CDC when device is configured. */
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 8


 154:main.c        ****         if (0u != USBUART_GetConfiguration())
 229              		.loc 1 154 0
 230 0022 FFF7FEFF 		bl	USBUART_GetConfiguration
 231 0026 0346     		mov	r3, r0
 232 0028 002B     		cmp	r3, #0
 233 002a 77D0     		beq	.L10
 155:main.c        ****         {
 156:main.c        ****             /* Wait until component is ready to send data to host. */
 157:main.c        ****             while (0u == USBUART_CDCIsReady())
 234              		.loc 1 157 0
 235 002c 00BF     		nop
 236              	.L11:
 237              		.loc 1 157 0 is_stmt 0 discriminator 1
 238 002e FFF7FEFF 		bl	USBUART_CDCIsReady
 239 0032 0346     		mov	r3, r0
 240 0034 002B     		cmp	r3, #0
 241 0036 FAD0     		beq	.L11
 158:main.c        ****                 {
 159:main.c        ****                 }
 160:main.c        ****                 if(prompt == 1){
 242              		.loc 1 160 0 is_stmt 1
 243 0038 3E4B     		ldr	r3, .L26
 244 003a 1B68     		ldr	r3, [r3]
 245 003c 012B     		cmp	r3, #1
 246 003e 02D1     		bne	.L25
 161:main.c        ****                     USBUART_PutString("Please enter amount of crabs (up to 127). Terminates with ca
 247              		.loc 1 161 0
 248 0040 3D48     		ldr	r0, .L26+4
 249 0042 FFF7FEFF 		bl	USBUART_PutString
 250              	.L25:
 162:main.c        ****                 }
 163:main.c        ****             /* Wait until component is ready to send data to host. */
 164:main.c        ****             while (0u == USBUART_CDCIsReady())
 251              		.loc 1 164 0
 252 0046 00BF     		nop
 253              	.L13:
 254              		.loc 1 164 0 is_stmt 0 discriminator 1
 255 0048 FFF7FEFF 		bl	USBUART_CDCIsReady
 256 004c 0346     		mov	r3, r0
 257 004e 002B     		cmp	r3, #0
 258 0050 FAD0     		beq	.L13
 165:main.c        ****                 {
 166:main.c        ****                 }
 167:main.c        ****                 if(prompt == 1){
 259              		.loc 1 167 0 is_stmt 1
 260 0052 384B     		ldr	r3, .L26
 261 0054 1B68     		ldr	r3, [r3]
 262 0056 012B     		cmp	r3, #1
 263 0058 04D1     		bne	.L14
 168:main.c        ****                     USBUART_PutCRLF();
 264              		.loc 1 168 0
 265 005a FFF7FEFF 		bl	USBUART_PutCRLF
 169:main.c        ****                     prompt = 0;
 266              		.loc 1 169 0
 267 005e 354B     		ldr	r3, .L26
 268 0060 0022     		movs	r2, #0
 269 0062 1A60     		str	r2, [r3]
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 9


 270              	.L14:
 170:main.c        ****                 }
 171:main.c        ****                 
 172:main.c        ****             /* Check for input data from host. */
 173:main.c        ****             if (0u != USBUART_DataIsReady())
 271              		.loc 1 173 0
 272 0064 FFF7FEFF 		bl	USBUART_DataIsReady
 273 0068 0346     		mov	r3, r0
 274 006a 002B     		cmp	r3, #0
 275 006c 56D0     		beq	.L10
 174:main.c        ****             {
 175:main.c        ****                 /* Read received data and re-enable OUT endpoint. */
 176:main.c        ****                 count = USBUART_GetAll(buffer);
 276              		.loc 1 176 0
 277 006e 3348     		ldr	r0, .L26+8
 278 0070 FFF7FEFF 		bl	USBUART_GetAll
 279 0074 0346     		mov	r3, r0
 280 0076 1A46     		mov	r2, r3
 281 0078 314B     		ldr	r3, .L26+12
 282 007a 1A80     		strh	r2, [r3]	@ movhi
 177:main.c        ****     
 178:main.c        ****                 if (strncmp (buffer,"0",1) == 0){
 179:main.c        ****                     //USBUART_PutString("True Zero");
 180:main.c        ****                 }
 181:main.c        ****                 if (strncmp (buffer,"\r",1) == 0){
 283              		.loc 1 181 0
 284 007c 2F4B     		ldr	r3, .L26+8
 285 007e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 286 0080 304B     		ldr	r3, .L26+16
 287 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 288 0084 9A42     		cmp	r2, r3
 289 0086 12D1     		bne	.L15
 182:main.c        ****                     //USBUART_PutString("Carriage Return");
 183:main.c        **** 
 184:main.c        ****                     if(i == 1){
 290              		.loc 1 184 0
 291 0088 2F4B     		ldr	r3, .L26+20
 292 008a 1B68     		ldr	r3, [r3]
 293 008c 012B     		cmp	r3, #1
 294 008e 03D1     		bne	.L16
 185:main.c        ****                         oneDigit = 1;
 295              		.loc 1 185 0
 296 0090 2E4B     		ldr	r3, .L26+24
 297 0092 0122     		movs	r2, #1
 298 0094 1A60     		str	r2, [r3]
 299 0096 06E0     		b	.L17
 300              	.L16:
 186:main.c        ****                     }else if(i == 0){
 301              		.loc 1 186 0
 302 0098 2B4B     		ldr	r3, .L26+20
 303 009a 1B68     		ldr	r3, [r3]
 304 009c 002B     		cmp	r3, #0
 305 009e 02D1     		bne	.L17
 187:main.c        ****                         twoDigit = 1;
 306              		.loc 1 187 0
 307 00a0 2B4B     		ldr	r3, .L26+28
 308 00a2 0122     		movs	r2, #1
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 10


 309 00a4 1A60     		str	r2, [r3]
 310              	.L17:
 188:main.c        ****                     }
 189:main.c        ****                     endFlag = 1; // set flag to add numbers
 311              		.loc 1 189 0
 312 00a6 2B4B     		ldr	r3, .L26+32
 313 00a8 0122     		movs	r2, #1
 314 00aa 1A60     		str	r2, [r3]
 315 00ac 08E0     		b	.L18
 316              	.L15:
 190:main.c        ****                 }else{
 191:main.c        ****                     // Convert string to int
 192:main.c        ****                     data[i] = (uint8)atoi(buffer);
 317              		.loc 1 192 0
 318 00ae 264B     		ldr	r3, .L26+20
 319 00b0 1C68     		ldr	r4, [r3]
 320 00b2 2248     		ldr	r0, .L26+8
 321 00b4 FFF7FEFF 		bl	atoi
 322 00b8 0346     		mov	r3, r0
 323 00ba DAB2     		uxtb	r2, r3
 324 00bc 264B     		ldr	r3, .L26+36
 325 00be 1A55     		strb	r2, [r3, r4]
 326              	.L18:
 193:main.c        ****                 }
 194:main.c        ****                 
 195:main.c        ****                 /* Make sure data array stays in bounds (size = 3) */
 196:main.c        ****                 if(i == 0){
 327              		.loc 1 196 0
 328 00c0 214B     		ldr	r3, .L26+20
 329 00c2 1B68     		ldr	r3, [r3]
 330 00c4 002B     		cmp	r3, #0
 331 00c6 06D1     		bne	.L19
 197:main.c        ****                     i = 2;
 332              		.loc 1 197 0
 333 00c8 1F4B     		ldr	r3, .L26+20
 334 00ca 0222     		movs	r2, #2
 335 00cc 1A60     		str	r2, [r3]
 198:main.c        ****                     endFlag = 1; // 3 characters have been entered
 336              		.loc 1 198 0
 337 00ce 214B     		ldr	r3, .L26+32
 338 00d0 0122     		movs	r2, #1
 339 00d2 1A60     		str	r2, [r3]
 340 00d4 04E0     		b	.L20
 341              	.L19:
 199:main.c        ****                 }else{
 200:main.c        ****                     i--;
 342              		.loc 1 200 0
 343 00d6 1C4B     		ldr	r3, .L26+20
 344 00d8 1B68     		ldr	r3, [r3]
 345 00da 013B     		subs	r3, r3, #1
 346 00dc 1A4A     		ldr	r2, .L26+20
 347 00de 1360     		str	r3, [r2]
 348              	.L20:
 201:main.c        ****                 }
 202:main.c        ****                 
 203:main.c        ****                  if (0u != count)
 349              		.loc 1 203 0
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 11


 350 00e0 174B     		ldr	r3, .L26+12
 351 00e2 1B88     		ldrh	r3, [r3]
 352 00e4 002B     		cmp	r3, #0
 353 00e6 19D0     		beq	.L10
 204:main.c        ****                 {
 205:main.c        ****                     /* Wait until component is ready to send data to host. */
 206:main.c        ****                     while (0u == USBUART_CDCIsReady())
 354              		.loc 1 206 0
 355 00e8 00BF     		nop
 356              	.L21:
 357              		.loc 1 206 0 is_stmt 0 discriminator 1
 358 00ea FFF7FEFF 		bl	USBUART_CDCIsReady
 359 00ee 0346     		mov	r3, r0
 360 00f0 002B     		cmp	r3, #0
 361 00f2 FAD0     		beq	.L21
 207:main.c        ****                     {
 208:main.c        ****                     }
 209:main.c        **** 
 210:main.c        ****                     /* Send data back to host. */
 211:main.c        ****                     USBUART_PutData(buffer, count);
 362              		.loc 1 211 0 is_stmt 1
 363 00f4 124B     		ldr	r3, .L26+12
 364 00f6 1B88     		ldrh	r3, [r3]
 365 00f8 1946     		mov	r1, r3
 366 00fa 1048     		ldr	r0, .L26+8
 367 00fc FFF7FEFF 		bl	USBUART_PutData
 212:main.c        **** 
 213:main.c        **** 
 214:main.c        ****                     /* If the last sent packet is exactly the maximum packet 
 215:main.c        ****                     *  size, it is followed by a zero-length packet to assure
 216:main.c        ****                     *  that the end of the segment is properly identified by 
 217:main.c        ****                     *  the terminal.
 218:main.c        ****                     */
 219:main.c        ****                     if (USBUART_BUFFER_SIZE == count)
 368              		.loc 1 219 0
 369 0100 0F4B     		ldr	r3, .L26+12
 370 0102 1B88     		ldrh	r3, [r3]
 371 0104 402B     		cmp	r3, #64
 372 0106 09D1     		bne	.L10
 220:main.c        ****                     {
 221:main.c        ****                         /* Wait until component is ready to send data to PC. */
 222:main.c        ****                         while (0u == USBUART_CDCIsReady())
 373              		.loc 1 222 0
 374 0108 00BF     		nop
 375              	.L22:
 376              		.loc 1 222 0 is_stmt 0 discriminator 1
 377 010a FFF7FEFF 		bl	USBUART_CDCIsReady
 378 010e 0346     		mov	r3, r0
 379 0110 002B     		cmp	r3, #0
 380 0112 FAD0     		beq	.L22
 223:main.c        ****                         {
 224:main.c        ****                         }
 225:main.c        **** 
 226:main.c        ****                         /* Send zero-length packet to PC. */
 227:main.c        ****                         USBUART_PutData(NULL, 0u);
 381              		.loc 1 227 0 is_stmt 1
 382 0114 0021     		movs	r1, #0
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 12


 383 0116 0020     		movs	r0, #0
 384 0118 FFF7FEFF 		bl	USBUART_PutData
 385              	.L10:
 228:main.c        ****                     }
 229:main.c        ****                 }
 230:main.c        ****             } // end (0u != USBUART_DataIsReady())
 231:main.c        ****         } // end (0u != USBUART_GetConfiguration())
 232:main.c        ****         if(endFlag == 1){
 386              		.loc 1 232 0
 387 011c 0D4B     		ldr	r3, .L26+32
 388 011e 1B68     		ldr	r3, [r3]
 389 0120 012B     		cmp	r3, #1
 390 0122 01D1     		bne	.L23
 233:main.c        ****             return 1;
 391              		.loc 1 233 0
 392 0124 0123     		movs	r3, #1
 393 0126 00E0     		b	.L24
 394              	.L23:
 234:main.c        ****         }else{
 235:main.c        ****             return 0;
 395              		.loc 1 235 0
 396 0128 0023     		movs	r3, #0
 397              	.L24:
 236:main.c        ****         }
 237:main.c        **** }//end GetCrabs()
 398              		.loc 1 237 0
 399 012a 1846     		mov	r0, r3
 400 012c 0C37     		adds	r7, r7, #12
 401              		.cfi_def_cfa_offset 12
 402 012e BD46     		mov	sp, r7
 403              		.cfi_def_cfa_register 13
 404              		@ sp needed
 405 0130 90BD     		pop	{r4, r7, pc}
 406              	.L27:
 407 0132 00BF     		.align	2
 408              	.L26:
 409 0134 00000000 		.word	prompt
 410 0138 20000000 		.word	.LC2
 411 013c 00000000 		.word	buffer
 412 0140 00000000 		.word	count
 413 0144 B0000000 		.word	.LC4
 414 0148 00000000 		.word	i
 415 014c 00000000 		.word	oneDigit
 416 0150 00000000 		.word	twoDigit
 417 0154 00000000 		.word	endFlag
 418 0158 00000000 		.word	data
 419              		.cfi_endproc
 420              	.LFE65:
 421              		.size	GetCrabs, .-GetCrabs
 422              		.section	.rodata
 423 00b2 0000     		.align	2
 424              	.LC5:
 425 00b4 4572726F 		.ascii	"Error. Please enter a number UP TO 127\000"
 425      722E2050 
 425      6C656173 
 425      6520656E 
 425      74657220 
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 13


 426              		.section	.text.CalculateCrabs,"ax",%progbits
 427              		.align	2
 428              		.global	CalculateCrabs
 429              		.thumb
 430              		.thumb_func
 431              		.type	CalculateCrabs, %function
 432              	CalculateCrabs:
 433              	.LFB66:
 238:main.c        **** 
 239:main.c        **** /*
 240:main.c        ****  * function: int CalculateCrabs()
 241:main.c        ****  * parameters: none
 242:main.c        ****  * returns: int crabs - amount of crabs from user input 
 243:main.c        ****  * description: This function takes an array of size three and converts
 244:main.c        ****  * to a single number
 245:main.c        ****  */
 246:main.c        **** int CalculateCrabs()
 247:main.c        **** {
 434              		.loc 1 247 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 8
 437              		@ frame_needed = 1, uses_anonymous_args = 0
 438 0000 80B5     		push	{r7, lr}
 439              		.cfi_def_cfa_offset 8
 440              		.cfi_offset 7, -8
 441              		.cfi_offset 14, -4
 442 0002 82B0     		sub	sp, sp, #8
 443              		.cfi_def_cfa_offset 16
 444 0004 00AF     		add	r7, sp, #0
 445              		.cfi_def_cfa_register 7
 248:main.c        ****     int crabs;
 249:main.c        ****     /* Wait until component is ready to send data to host. */
 250:main.c        ****     while (0u == USBUART_CDCIsReady())
 446              		.loc 1 250 0
 447 0006 00BF     		nop
 448              	.L29:
 449              		.loc 1 250 0 is_stmt 0 discriminator 1
 450 0008 FFF7FEFF 		bl	USBUART_CDCIsReady
 451 000c 0346     		mov	r3, r0
 452 000e 002B     		cmp	r3, #0
 453 0010 FAD0     		beq	.L29
 251:main.c        ****     {
 252:main.c        ****     }
 253:main.c        ****     USBUART_PutCRLF();
 454              		.loc 1 253 0 is_stmt 1
 455 0012 FFF7FEFF 		bl	USBUART_PutCRLF
 254:main.c        ****     /* Shift data if carriage return was pressed */
 255:main.c        ****     if(oneDigit == 1){
 456              		.loc 1 255 0
 457 0016 404B     		ldr	r3, .L37
 458 0018 1B68     		ldr	r3, [r3]
 459 001a 012B     		cmp	r3, #1
 460 001c 0AD1     		bne	.L30
 256:main.c        ****         //USBUART_PutString("one digit");
 257:main.c        ****         data[0] = data[2];
 461              		.loc 1 257 0
 462 001e 3F4B     		ldr	r3, .L37+4
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 14


 463 0020 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 464 0022 3E4B     		ldr	r3, .L37+4
 465 0024 1A70     		strb	r2, [r3]
 258:main.c        ****         data[2] = 0;
 466              		.loc 1 258 0
 467 0026 3D4B     		ldr	r3, .L37+4
 468 0028 0022     		movs	r2, #0
 469 002a 9A70     		strb	r2, [r3, #2]
 259:main.c        ****         oneDigit = 0;
 470              		.loc 1 259 0
 471 002c 3A4B     		ldr	r3, .L37
 472 002e 0022     		movs	r2, #0
 473 0030 1A60     		str	r2, [r3]
 474 0032 11E0     		b	.L31
 475              	.L30:
 260:main.c        ****     }else if(twoDigit == 1){
 476              		.loc 1 260 0
 477 0034 3A4B     		ldr	r3, .L37+8
 478 0036 1B68     		ldr	r3, [r3]
 479 0038 012B     		cmp	r3, #1
 480 003a 0DD1     		bne	.L31
 261:main.c        ****         //USBUART_PutString("two digits");
 262:main.c        ****         data[0] = data[1];
 481              		.loc 1 262 0
 482 003c 374B     		ldr	r3, .L37+4
 483 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 484 0040 364B     		ldr	r3, .L37+4
 485 0042 1A70     		strb	r2, [r3]
 263:main.c        ****         data[1] = data[2];
 486              		.loc 1 263 0
 487 0044 354B     		ldr	r3, .L37+4
 488 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 489 0048 344B     		ldr	r3, .L37+4
 490 004a 5A70     		strb	r2, [r3, #1]
 264:main.c        ****         data[2] = 0;
 491              		.loc 1 264 0
 492 004c 334B     		ldr	r3, .L37+4
 493 004e 0022     		movs	r2, #0
 494 0050 9A70     		strb	r2, [r3, #2]
 265:main.c        ****         twoDigit = 0;
 495              		.loc 1 265 0
 496 0052 334B     		ldr	r3, .L37+8
 497 0054 0022     		movs	r2, #0
 498 0056 1A60     		str	r2, [r3]
 499              	.L31:
 266:main.c        ****     }
 267:main.c        ****     /* Apply digit place to integer */
 268:main.c        ****     data[0] = data[0] * 1;
 500              		.loc 1 268 0
 501 0058 304B     		ldr	r3, .L37+4
 502 005a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 503 005c 2F4B     		ldr	r3, .L37+4
 504 005e 1A70     		strb	r2, [r3]
 269:main.c        ****     data[1] = data[1] * 10;
 505              		.loc 1 269 0
 506 0060 2E4B     		ldr	r3, .L37+4
 507 0062 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 15


 508 0064 1A46     		mov	r2, r3
 509 0066 9200     		lsls	r2, r2, #2
 510 0068 1344     		add	r3, r3, r2
 511 006a 5B00     		lsls	r3, r3, #1
 512 006c DAB2     		uxtb	r2, r3
 513 006e 2B4B     		ldr	r3, .L37+4
 514 0070 5A70     		strb	r2, [r3, #1]
 270:main.c        ****     data[2] = data[2] * 100;
 515              		.loc 1 270 0
 516 0072 2A4B     		ldr	r3, .L37+4
 517 0074 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 518 0076 1A46     		mov	r2, r3
 519 0078 9200     		lsls	r2, r2, #2
 520 007a 1344     		add	r3, r3, r2
 521 007c 1A46     		mov	r2, r3
 522 007e 9100     		lsls	r1, r2, #2
 523 0080 1A46     		mov	r2, r3
 524 0082 0B46     		mov	r3, r1
 525 0084 1344     		add	r3, r3, r2
 526 0086 9B00     		lsls	r3, r3, #2
 527 0088 DAB2     		uxtb	r2, r3
 528 008a 244B     		ldr	r3, .L37+4
 529 008c 9A70     		strb	r2, [r3, #2]
 271:main.c        ****     crabs = data[0] + data[1] + data[2];
 530              		.loc 1 271 0
 531 008e 234B     		ldr	r3, .L37+4
 532 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 533 0092 1A46     		mov	r2, r3
 534 0094 214B     		ldr	r3, .L37+4
 535 0096 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 536 0098 1344     		add	r3, r3, r2
 537 009a 204A     		ldr	r2, .L37+4
 538 009c 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 539 009e 1344     		add	r3, r3, r2
 540 00a0 7B60     		str	r3, [r7, #4]
 272:main.c        ****     if(crabs > MAX_CRABS){
 541              		.loc 1 272 0
 542 00a2 7B68     		ldr	r3, [r7, #4]
 543 00a4 7F2B     		cmp	r3, #127
 544 00a6 15DD     		ble	.L32
 273:main.c        ****         crabs = 0;
 545              		.loc 1 273 0
 546 00a8 0023     		movs	r3, #0
 547 00aa 7B60     		str	r3, [r7, #4]
 274:main.c        ****         error = 1;
 548              		.loc 1 274 0
 549 00ac 1D4B     		ldr	r3, .L37+12
 550 00ae 0122     		movs	r2, #1
 551 00b0 1A60     		str	r2, [r3]
 275:main.c        ****         /* Wait until component is ready to send data to host. */
 276:main.c        ****         while (0u == USBUART_CDCIsReady())
 552              		.loc 1 276 0
 553 00b2 00BF     		nop
 554              	.L33:
 555              		.loc 1 276 0 is_stmt 0 discriminator 1
 556 00b4 FFF7FEFF 		bl	USBUART_CDCIsReady
 557 00b8 0346     		mov	r3, r0
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 16


 558 00ba 002B     		cmp	r3, #0
 559 00bc FAD0     		beq	.L33
 277:main.c        ****         {
 278:main.c        ****         }
 279:main.c        ****         USBUART_PutString("Error. Please enter a number UP TO 127");
 560              		.loc 1 279 0 is_stmt 1
 561 00be 1A48     		ldr	r0, .L37+16
 562 00c0 FFF7FEFF 		bl	USBUART_PutString
 280:main.c        ****         /* Wait until component is ready to send data to host. */
 281:main.c        ****         while (0u == USBUART_CDCIsReady())
 563              		.loc 1 281 0
 564 00c4 00BF     		nop
 565              	.L34:
 566              		.loc 1 281 0 is_stmt 0 discriminator 1
 567 00c6 FFF7FEFF 		bl	USBUART_CDCIsReady
 568 00ca 0346     		mov	r3, r0
 569 00cc 002B     		cmp	r3, #0
 570 00ce FAD0     		beq	.L34
 282:main.c        ****         {
 283:main.c        ****         }
 284:main.c        ****         USBUART_PutCRLF();
 571              		.loc 1 284 0 is_stmt 1
 572 00d0 FFF7FEFF 		bl	USBUART_PutCRLF
 573              	.L32:
 285:main.c        ****     }
 286:main.c        ****     /* reset array */
 287:main.c        ****     data[0] = 0; 
 574              		.loc 1 287 0
 575 00d4 114B     		ldr	r3, .L37+4
 576 00d6 0022     		movs	r2, #0
 577 00d8 1A70     		strb	r2, [r3]
 288:main.c        ****     data[1] = 0;
 578              		.loc 1 288 0
 579 00da 104B     		ldr	r3, .L37+4
 580 00dc 0022     		movs	r2, #0
 581 00de 5A70     		strb	r2, [r3, #1]
 289:main.c        ****     data[2] = 0;
 582              		.loc 1 289 0
 583 00e0 0E4B     		ldr	r3, .L37+4
 584 00e2 0022     		movs	r2, #0
 585 00e4 9A70     		strb	r2, [r3, #2]
 290:main.c        ****     i = 2; // reset indexing for array
 586              		.loc 1 290 0
 587 00e6 114B     		ldr	r3, .L37+20
 588 00e8 0222     		movs	r2, #2
 589 00ea 1A60     		str	r2, [r3]
 291:main.c        ****     endFlag = 0; // reset endFlag for gathering new data
 590              		.loc 1 291 0
 591 00ec 104B     		ldr	r3, .L37+24
 592 00ee 0022     		movs	r2, #0
 593 00f0 1A60     		str	r2, [r3]
 292:main.c        ****                     
 293:main.c        ****     if(error == 1){
 594              		.loc 1 293 0
 595 00f2 0C4B     		ldr	r3, .L37+12
 596 00f4 1B68     		ldr	r3, [r3]
 597 00f6 012B     		cmp	r3, #1
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 17


 598 00f8 05D1     		bne	.L35
 294:main.c        ****         error = 0; // reset error checking
 599              		.loc 1 294 0
 600 00fa 0A4B     		ldr	r3, .L37+12
 601 00fc 0022     		movs	r2, #0
 602 00fe 1A60     		str	r2, [r3]
 295:main.c        ****         return ERROR;
 603              		.loc 1 295 0
 604 0100 40F24D13 		movw	r3, #333
 605 0104 03E0     		b	.L36
 606              	.L35:
 296:main.c        **** 
 297:main.c        ****     }else{
 298:main.c        ****         prompt = 1;
 607              		.loc 1 298 0
 608 0106 0B4B     		ldr	r3, .L37+28
 609 0108 0122     		movs	r2, #1
 610 010a 1A60     		str	r2, [r3]
 299:main.c        ****         return crabs;
 611              		.loc 1 299 0
 612 010c 7B68     		ldr	r3, [r7, #4]
 613              	.L36:
 300:main.c        ****     }
 301:main.c        **** } /* END OF CalculateCrabs() */
 614              		.loc 1 301 0
 615 010e 1846     		mov	r0, r3
 616 0110 0837     		adds	r7, r7, #8
 617              		.cfi_def_cfa_offset 8
 618 0112 BD46     		mov	sp, r7
 619              		.cfi_def_cfa_register 13
 620              		@ sp needed
 621 0114 80BD     		pop	{r7, pc}
 622              	.L38:
 623 0116 00BF     		.align	2
 624              	.L37:
 625 0118 00000000 		.word	oneDigit
 626 011c 00000000 		.word	data
 627 0120 00000000 		.word	twoDigit
 628 0124 00000000 		.word	error
 629 0128 B4000000 		.word	.LC5
 630 012c 00000000 		.word	i
 631 0130 00000000 		.word	endFlag
 632 0134 00000000 		.word	prompt
 633              		.cfi_endproc
 634              	.LFE66:
 635              		.size	CalculateCrabs, .-CalculateCrabs
 636              		.section	.rodata
 637 00db 00       		.align	2
 638              	.LC6:
 639 00dc 20202020 		.ascii	"           \000"
 639      20202020 
 639      20202000 
 640              		.align	2
 641              	.LC7:
 642 00e8 43726162 		.ascii	"Crabs: %d\000"
 642      733A2025 
 642      6400
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 18


 643              		.section	.text.DisplayCrabs,"ax",%progbits
 644              		.align	2
 645              		.global	DisplayCrabs
 646              		.thumb
 647              		.thumb_func
 648              		.type	DisplayCrabs, %function
 649              	DisplayCrabs:
 650              	.LFB67:
 302:main.c        **** 
 303:main.c        **** /*
 304:main.c        ****  * function: void DisplayCrabs()
 305:main.c        ****  * parameters: int crabs
 306:main.c        ****  * returns: void
 307:main.c        ****  * description: Displays the number of crabs on LCD Display
 308:main.c        ****  */
 309:main.c        **** void DisplayCrabs(int crabs){
 651              		.loc 1 309 0
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 8
 654              		@ frame_needed = 1, uses_anonymous_args = 0
 655 0000 80B5     		push	{r7, lr}
 656              		.cfi_def_cfa_offset 8
 657              		.cfi_offset 7, -8
 658              		.cfi_offset 14, -4
 659 0002 82B0     		sub	sp, sp, #8
 660              		.cfi_def_cfa_offset 16
 661 0004 00AF     		add	r7, sp, #0
 662              		.cfi_def_cfa_register 7
 663 0006 7860     		str	r0, [r7, #4]
 310:main.c        ****     /* Clear LCD line. */
 311:main.c        ****     LCD_Position(0u, 0u);
 664              		.loc 1 311 0
 665 0008 0021     		movs	r1, #0
 666 000a 0020     		movs	r0, #0
 667 000c FFF7FEFF 		bl	LCD_Position
 312:main.c        ****     LCD_PrintString("           ");
 668              		.loc 1 312 0
 669 0010 0948     		ldr	r0, .L40
 670 0012 FFF7FEFF 		bl	LCD_PrintString
 313:main.c        ****     /* Reset LCD line position. */
 314:main.c        ****     LCD_Position(0u, 0u);
 671              		.loc 1 314 0
 672 0016 0021     		movs	r1, #0
 673 0018 0020     		movs	r0, #0
 674 001a FFF7FEFF 		bl	LCD_Position
 315:main.c        ****     /* Store int crabs into a string to print to LCD */
 316:main.c        ****     sprintf(lineStr,"Crabs: %d", crabs);
 675              		.loc 1 316 0
 676 001e 7A68     		ldr	r2, [r7, #4]
 677 0020 0649     		ldr	r1, .L40+4
 678 0022 0748     		ldr	r0, .L40+8
 679 0024 FFF7FEFF 		bl	sprintf
 317:main.c        ****     LCD_PrintString(lineStr);
 680              		.loc 1 317 0
 681 0028 0548     		ldr	r0, .L40+8
 682 002a FFF7FEFF 		bl	LCD_PrintString
 318:main.c        **** }
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 19


 683              		.loc 1 318 0
 684 002e 00BF     		nop
 685 0030 0837     		adds	r7, r7, #8
 686              		.cfi_def_cfa_offset 8
 687 0032 BD46     		mov	sp, r7
 688              		.cfi_def_cfa_register 13
 689              		@ sp needed
 690 0034 80BD     		pop	{r7, pc}
 691              	.L41:
 692 0036 00BF     		.align	2
 693              	.L40:
 694 0038 DC000000 		.word	.LC6
 695 003c E8000000 		.word	.LC7
 696 0040 00000000 		.word	lineStr
 697              		.cfi_endproc
 698              	.LFE67:
 699              		.size	DisplayCrabs, .-DisplayCrabs
 700              		.text
 701              	.Letext0:
 702              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 703              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 704              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 705              		.file 5 "Generated_Source\\PSoC5/core_cm3.h"
 706              		.section	.debug_info,"",%progbits
 707              	.Ldebug_info0:
 708 0000 5A020000 		.4byte	0x25a
 709 0004 0400     		.2byte	0x4
 710 0006 00000000 		.4byte	.Ldebug_abbrev0
 711 000a 04       		.byte	0x4
 712 000b 01       		.uleb128 0x1
 713 000c 00000000 		.4byte	.LASF35
 714 0010 0C       		.byte	0xc
 715 0011 D8010000 		.4byte	.LASF36
 716 0015 65010000 		.4byte	.LASF37
 717 0019 00000000 		.4byte	.Ldebug_ranges0+0
 718 001d 00000000 		.4byte	0
 719 0021 00000000 		.4byte	.Ldebug_line0
 720 0025 02       		.uleb128 0x2
 721 0026 01       		.byte	0x1
 722 0027 06       		.byte	0x6
 723 0028 16020000 		.4byte	.LASF0
 724 002c 02       		.uleb128 0x2
 725 002d 01       		.byte	0x1
 726 002e 08       		.byte	0x8
 727 002f C4000000 		.4byte	.LASF1
 728 0033 02       		.uleb128 0x2
 729 0034 02       		.byte	0x2
 730 0035 05       		.byte	0x5
 731 0036 EA010000 		.4byte	.LASF2
 732 003a 02       		.uleb128 0x2
 733 003b 02       		.byte	0x2
 734 003c 07       		.byte	0x7
 735 003d EA000000 		.4byte	.LASF3
 736 0041 03       		.uleb128 0x3
 737 0042 A6000000 		.4byte	.LASF9
 738 0046 02       		.byte	0x2
 739 0047 3F       		.byte	0x3f
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 20


 740 0048 4C000000 		.4byte	0x4c
 741 004c 02       		.uleb128 0x2
 742 004d 04       		.byte	0x4
 743 004e 05       		.byte	0x5
 744 004f 01020000 		.4byte	.LASF4
 745 0053 02       		.uleb128 0x2
 746 0054 04       		.byte	0x4
 747 0055 07       		.byte	0x7
 748 0056 D8000000 		.4byte	.LASF5
 749 005a 02       		.uleb128 0x2
 750 005b 08       		.byte	0x8
 751 005c 05       		.byte	0x5
 752 005d CA010000 		.4byte	.LASF6
 753 0061 02       		.uleb128 0x2
 754 0062 08       		.byte	0x8
 755 0063 07       		.byte	0x7
 756 0064 4E010000 		.4byte	.LASF7
 757 0068 04       		.uleb128 0x4
 758 0069 04       		.byte	0x4
 759 006a 05       		.byte	0x5
 760 006b 696E7400 		.ascii	"int\000"
 761 006f 02       		.uleb128 0x2
 762 0070 04       		.byte	0x4
 763 0071 07       		.byte	0x7
 764 0072 41010000 		.4byte	.LASF8
 765 0076 03       		.uleb128 0x3
 766 0077 A7010000 		.4byte	.LASF10
 767 007b 03       		.byte	0x3
 768 007c 2C       		.byte	0x2c
 769 007d 41000000 		.4byte	0x41
 770 0081 05       		.uleb128 0x5
 771 0082 FB010000 		.4byte	.LASF11
 772 0086 04       		.byte	0x4
 773 0087 9201     		.2byte	0x192
 774 0089 2C000000 		.4byte	0x2c
 775 008d 05       		.uleb128 0x5
 776 008e 28010000 		.4byte	.LASF12
 777 0092 04       		.byte	0x4
 778 0093 9301     		.2byte	0x193
 779 0095 3A000000 		.4byte	0x3a
 780 0099 02       		.uleb128 0x2
 781 009a 04       		.byte	0x4
 782 009b 04       		.byte	0x4
 783 009c B9000000 		.4byte	.LASF13
 784 00a0 02       		.uleb128 0x2
 785 00a1 08       		.byte	0x8
 786 00a2 04       		.byte	0x4
 787 00a3 0A010000 		.4byte	.LASF14
 788 00a7 05       		.uleb128 0x5
 789 00a8 D2000000 		.4byte	.LASF15
 790 00ac 04       		.byte	0x4
 791 00ad A301     		.2byte	0x1a3
 792 00af B3000000 		.4byte	0xb3
 793 00b3 02       		.uleb128 0x2
 794 00b4 01       		.byte	0x1
 795 00b5 08       		.byte	0x8
 796 00b6 DF010000 		.4byte	.LASF16
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 21


 797 00ba 02       		.uleb128 0x2
 798 00bb 08       		.byte	0x8
 799 00bc 04       		.byte	0x4
 800 00bd 0A020000 		.4byte	.LASF17
 801 00c1 02       		.uleb128 0x2
 802 00c2 04       		.byte	0x4
 803 00c3 07       		.byte	0x7
 804 00c4 AF010000 		.4byte	.LASF18
 805 00c8 06       		.uleb128 0x6
 806 00c9 3C010000 		.4byte	.LASF23
 807 00cd 01       		.byte	0x1
 808 00ce 59       		.byte	0x59
 809 00cf 68000000 		.4byte	0x68
 810 00d3 00000000 		.4byte	.LFB64
 811 00d7 84000000 		.4byte	.LFE64-.LFB64
 812 00db 01       		.uleb128 0x1
 813 00dc 9C       		.byte	0x9c
 814 00dd FE000000 		.4byte	0xfe
 815 00e1 07       		.uleb128 0x7
 816 00e2 11010000 		.4byte	.LASF19
 817 00e6 01       		.byte	0x1
 818 00e7 5B       		.byte	0x5b
 819 00e8 68000000 		.4byte	0x68
 820 00ec 02       		.uleb128 0x2
 821 00ed 91       		.byte	0x91
 822 00ee 74       		.sleb128 -12
 823 00ef 07       		.uleb128 0x7
 824 00f0 B8010000 		.4byte	.LASF20
 825 00f4 01       		.byte	0x1
 826 00f5 5C       		.byte	0x5c
 827 00f6 68000000 		.4byte	0x68
 828 00fa 02       		.uleb128 0x2
 829 00fb 91       		.byte	0x91
 830 00fc 70       		.sleb128 -16
 831 00fd 00       		.byte	0
 832 00fe 08       		.uleb128 0x8
 833 00ff 1F010000 		.4byte	.LASF21
 834 0103 01       		.byte	0x1
 835 0104 8A       		.byte	0x8a
 836 0105 68000000 		.4byte	0x68
 837 0109 00000000 		.4byte	.LFB65
 838 010d 5C010000 		.4byte	.LFE65-.LFB65
 839 0111 01       		.uleb128 0x1
 840 0112 9C       		.byte	0x9c
 841 0113 26010000 		.4byte	0x126
 842 0117 07       		.uleb128 0x7
 843 0118 11010000 		.4byte	.LASF19
 844 011c 01       		.byte	0x1
 845 011d 8C       		.byte	0x8c
 846 011e 8D000000 		.4byte	0x8d
 847 0122 02       		.uleb128 0x2
 848 0123 91       		.byte	0x91
 849 0124 6E       		.sleb128 -18
 850 0125 00       		.byte	0
 851 0126 08       		.uleb128 0x8
 852 0127 97000000 		.4byte	.LASF22
 853 012b 01       		.byte	0x1
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 22


 854 012c F6       		.byte	0xf6
 855 012d 68000000 		.4byte	0x68
 856 0131 00000000 		.4byte	.LFB66
 857 0135 38010000 		.4byte	.LFE66-.LFB66
 858 0139 01       		.uleb128 0x1
 859 013a 9C       		.byte	0x9c
 860 013b 4E010000 		.4byte	0x14e
 861 013f 07       		.uleb128 0x7
 862 0140 11010000 		.4byte	.LASF19
 863 0144 01       		.byte	0x1
 864 0145 F8       		.byte	0xf8
 865 0146 68000000 		.4byte	0x68
 866 014a 02       		.uleb128 0x2
 867 014b 91       		.byte	0x91
 868 014c 74       		.sleb128 -12
 869 014d 00       		.byte	0
 870 014e 09       		.uleb128 0x9
 871 014f 2F010000 		.4byte	.LASF24
 872 0153 01       		.byte	0x1
 873 0154 3501     		.2byte	0x135
 874 0156 00000000 		.4byte	.LFB67
 875 015a 44000000 		.4byte	.LFE67-.LFB67
 876 015e 01       		.uleb128 0x1
 877 015f 9C       		.byte	0x9c
 878 0160 74010000 		.4byte	0x174
 879 0164 0A       		.uleb128 0xa
 880 0165 11010000 		.4byte	.LASF19
 881 0169 01       		.byte	0x1
 882 016a 3501     		.2byte	0x135
 883 016c 68000000 		.4byte	0x68
 884 0170 02       		.uleb128 0x2
 885 0171 91       		.byte	0x91
 886 0172 74       		.sleb128 -12
 887 0173 00       		.byte	0
 888 0174 0B       		.uleb128 0xb
 889 0175 FD000000 		.4byte	.LASF25
 890 0179 05       		.byte	0x5
 891 017a 1207     		.2byte	0x712
 892 017c 80010000 		.4byte	0x180
 893 0180 0C       		.uleb128 0xc
 894 0181 76000000 		.4byte	0x76
 895 0185 0D       		.uleb128 0xd
 896 0186 22020000 		.4byte	.LASF26
 897 018a 01       		.byte	0x1
 898 018b 49       		.byte	0x49
 899 018c 68000000 		.4byte	0x68
 900 0190 05       		.uleb128 0x5
 901 0191 03       		.byte	0x3
 902 0192 00000000 		.4byte	prompt
 903 0196 0D       		.uleb128 0xd
 904 0197 17010000 		.4byte	.LASF27
 905 019b 01       		.byte	0x1
 906 019c 4A       		.byte	0x4a
 907 019d 68000000 		.4byte	0x68
 908 01a1 05       		.uleb128 0x5
 909 01a2 03       		.byte	0x3
 910 01a3 00000000 		.4byte	endFlag
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 23


 911 01a7 0D       		.uleb128 0xd
 912 01a8 8E000000 		.4byte	.LASF28
 913 01ac 01       		.byte	0x1
 914 01ad 4B       		.byte	0x4b
 915 01ae 68000000 		.4byte	0x68
 916 01b2 05       		.uleb128 0x5
 917 01b3 03       		.byte	0x3
 918 01b4 00000000 		.4byte	oneDigit
 919 01b8 0D       		.uleb128 0xd
 920 01b9 B0000000 		.4byte	.LASF29
 921 01bd 01       		.byte	0x1
 922 01be 4C       		.byte	0x4c
 923 01bf 68000000 		.4byte	0x68
 924 01c3 05       		.uleb128 0x5
 925 01c4 03       		.byte	0x3
 926 01c5 00000000 		.4byte	twoDigit
 927 01c9 0D       		.uleb128 0xd
 928 01ca C4010000 		.4byte	.LASF30
 929 01ce 01       		.byte	0x1
 930 01cf 4D       		.byte	0x4d
 931 01d0 68000000 		.4byte	0x68
 932 01d4 05       		.uleb128 0x5
 933 01d5 03       		.byte	0x3
 934 01d6 00000000 		.4byte	error
 935 01da 0E       		.uleb128 0xe
 936 01db 6900     		.ascii	"i\000"
 937 01dd 01       		.byte	0x1
 938 01de 4E       		.byte	0x4e
 939 01df 68000000 		.4byte	0x68
 940 01e3 05       		.uleb128 0x5
 941 01e4 03       		.byte	0x3
 942 01e5 00000000 		.4byte	i
 943 01e9 0D       		.uleb128 0xd
 944 01ea E4010000 		.4byte	.LASF31
 945 01ee 01       		.byte	0x1
 946 01ef 4F       		.byte	0x4f
 947 01f0 8D000000 		.4byte	0x8d
 948 01f4 05       		.uleb128 0x5
 949 01f5 03       		.byte	0x3
 950 01f6 00000000 		.4byte	count
 951 01fa 0F       		.uleb128 0xf
 952 01fb A7000000 		.4byte	0xa7
 953 01ff 0A020000 		.4byte	0x20a
 954 0203 10       		.uleb128 0x10
 955 0204 C1000000 		.4byte	0xc1
 956 0208 13       		.byte	0x13
 957 0209 00       		.byte	0
 958 020a 0D       		.uleb128 0xd
 959 020b 29020000 		.4byte	.LASF32
 960 020f 01       		.byte	0x1
 961 0210 50       		.byte	0x50
 962 0211 FA010000 		.4byte	0x1fa
 963 0215 05       		.uleb128 0x5
 964 0216 03       		.byte	0x3
 965 0217 00000000 		.4byte	lineStr
 966 021b 0F       		.uleb128 0xf
 967 021c 81000000 		.4byte	0x81
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 24


 968 0220 2B020000 		.4byte	0x22b
 969 0224 10       		.uleb128 0x10
 970 0225 C1000000 		.4byte	0xc1
 971 0229 3F       		.byte	0x3f
 972 022a 00       		.byte	0
 973 022b 0D       		.uleb128 0xd
 974 022c F4010000 		.4byte	.LASF33
 975 0230 01       		.byte	0x1
 976 0231 51       		.byte	0x51
 977 0232 1B020000 		.4byte	0x21b
 978 0236 05       		.uleb128 0x5
 979 0237 03       		.byte	0x3
 980 0238 00000000 		.4byte	buffer
 981 023c 0F       		.uleb128 0xf
 982 023d 81000000 		.4byte	0x81
 983 0241 4C020000 		.4byte	0x24c
 984 0245 10       		.uleb128 0x10
 985 0246 C1000000 		.4byte	0xc1
 986 024a 02       		.byte	0x2
 987 024b 00       		.byte	0
 988 024c 0D       		.uleb128 0xd
 989 024d BF000000 		.4byte	.LASF34
 990 0251 01       		.byte	0x1
 991 0252 52       		.byte	0x52
 992 0253 3C020000 		.4byte	0x23c
 993 0257 05       		.uleb128 0x5
 994 0258 03       		.byte	0x3
 995 0259 00000000 		.4byte	data
 996 025d 00       		.byte	0
 997              		.section	.debug_abbrev,"",%progbits
 998              	.Ldebug_abbrev0:
 999 0000 01       		.uleb128 0x1
 1000 0001 11       		.uleb128 0x11
 1001 0002 01       		.byte	0x1
 1002 0003 25       		.uleb128 0x25
 1003 0004 0E       		.uleb128 0xe
 1004 0005 13       		.uleb128 0x13
 1005 0006 0B       		.uleb128 0xb
 1006 0007 03       		.uleb128 0x3
 1007 0008 0E       		.uleb128 0xe
 1008 0009 1B       		.uleb128 0x1b
 1009 000a 0E       		.uleb128 0xe
 1010 000b 55       		.uleb128 0x55
 1011 000c 17       		.uleb128 0x17
 1012 000d 11       		.uleb128 0x11
 1013 000e 01       		.uleb128 0x1
 1014 000f 10       		.uleb128 0x10
 1015 0010 17       		.uleb128 0x17
 1016 0011 00       		.byte	0
 1017 0012 00       		.byte	0
 1018 0013 02       		.uleb128 0x2
 1019 0014 24       		.uleb128 0x24
 1020 0015 00       		.byte	0
 1021 0016 0B       		.uleb128 0xb
 1022 0017 0B       		.uleb128 0xb
 1023 0018 3E       		.uleb128 0x3e
 1024 0019 0B       		.uleb128 0xb
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 25


 1025 001a 03       		.uleb128 0x3
 1026 001b 0E       		.uleb128 0xe
 1027 001c 00       		.byte	0
 1028 001d 00       		.byte	0
 1029 001e 03       		.uleb128 0x3
 1030 001f 16       		.uleb128 0x16
 1031 0020 00       		.byte	0
 1032 0021 03       		.uleb128 0x3
 1033 0022 0E       		.uleb128 0xe
 1034 0023 3A       		.uleb128 0x3a
 1035 0024 0B       		.uleb128 0xb
 1036 0025 3B       		.uleb128 0x3b
 1037 0026 0B       		.uleb128 0xb
 1038 0027 49       		.uleb128 0x49
 1039 0028 13       		.uleb128 0x13
 1040 0029 00       		.byte	0
 1041 002a 00       		.byte	0
 1042 002b 04       		.uleb128 0x4
 1043 002c 24       		.uleb128 0x24
 1044 002d 00       		.byte	0
 1045 002e 0B       		.uleb128 0xb
 1046 002f 0B       		.uleb128 0xb
 1047 0030 3E       		.uleb128 0x3e
 1048 0031 0B       		.uleb128 0xb
 1049 0032 03       		.uleb128 0x3
 1050 0033 08       		.uleb128 0x8
 1051 0034 00       		.byte	0
 1052 0035 00       		.byte	0
 1053 0036 05       		.uleb128 0x5
 1054 0037 16       		.uleb128 0x16
 1055 0038 00       		.byte	0
 1056 0039 03       		.uleb128 0x3
 1057 003a 0E       		.uleb128 0xe
 1058 003b 3A       		.uleb128 0x3a
 1059 003c 0B       		.uleb128 0xb
 1060 003d 3B       		.uleb128 0x3b
 1061 003e 05       		.uleb128 0x5
 1062 003f 49       		.uleb128 0x49
 1063 0040 13       		.uleb128 0x13
 1064 0041 00       		.byte	0
 1065 0042 00       		.byte	0
 1066 0043 06       		.uleb128 0x6
 1067 0044 2E       		.uleb128 0x2e
 1068 0045 01       		.byte	0x1
 1069 0046 3F       		.uleb128 0x3f
 1070 0047 19       		.uleb128 0x19
 1071 0048 03       		.uleb128 0x3
 1072 0049 0E       		.uleb128 0xe
 1073 004a 3A       		.uleb128 0x3a
 1074 004b 0B       		.uleb128 0xb
 1075 004c 3B       		.uleb128 0x3b
 1076 004d 0B       		.uleb128 0xb
 1077 004e 49       		.uleb128 0x49
 1078 004f 13       		.uleb128 0x13
 1079 0050 11       		.uleb128 0x11
 1080 0051 01       		.uleb128 0x1
 1081 0052 12       		.uleb128 0x12
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 26


 1082 0053 06       		.uleb128 0x6
 1083 0054 40       		.uleb128 0x40
 1084 0055 18       		.uleb128 0x18
 1085 0056 9642     		.uleb128 0x2116
 1086 0058 19       		.uleb128 0x19
 1087 0059 01       		.uleb128 0x1
 1088 005a 13       		.uleb128 0x13
 1089 005b 00       		.byte	0
 1090 005c 00       		.byte	0
 1091 005d 07       		.uleb128 0x7
 1092 005e 34       		.uleb128 0x34
 1093 005f 00       		.byte	0
 1094 0060 03       		.uleb128 0x3
 1095 0061 0E       		.uleb128 0xe
 1096 0062 3A       		.uleb128 0x3a
 1097 0063 0B       		.uleb128 0xb
 1098 0064 3B       		.uleb128 0x3b
 1099 0065 0B       		.uleb128 0xb
 1100 0066 49       		.uleb128 0x49
 1101 0067 13       		.uleb128 0x13
 1102 0068 02       		.uleb128 0x2
 1103 0069 18       		.uleb128 0x18
 1104 006a 00       		.byte	0
 1105 006b 00       		.byte	0
 1106 006c 08       		.uleb128 0x8
 1107 006d 2E       		.uleb128 0x2e
 1108 006e 01       		.byte	0x1
 1109 006f 3F       		.uleb128 0x3f
 1110 0070 19       		.uleb128 0x19
 1111 0071 03       		.uleb128 0x3
 1112 0072 0E       		.uleb128 0xe
 1113 0073 3A       		.uleb128 0x3a
 1114 0074 0B       		.uleb128 0xb
 1115 0075 3B       		.uleb128 0x3b
 1116 0076 0B       		.uleb128 0xb
 1117 0077 27       		.uleb128 0x27
 1118 0078 19       		.uleb128 0x19
 1119 0079 49       		.uleb128 0x49
 1120 007a 13       		.uleb128 0x13
 1121 007b 11       		.uleb128 0x11
 1122 007c 01       		.uleb128 0x1
 1123 007d 12       		.uleb128 0x12
 1124 007e 06       		.uleb128 0x6
 1125 007f 40       		.uleb128 0x40
 1126 0080 18       		.uleb128 0x18
 1127 0081 9642     		.uleb128 0x2116
 1128 0083 19       		.uleb128 0x19
 1129 0084 01       		.uleb128 0x1
 1130 0085 13       		.uleb128 0x13
 1131 0086 00       		.byte	0
 1132 0087 00       		.byte	0
 1133 0088 09       		.uleb128 0x9
 1134 0089 2E       		.uleb128 0x2e
 1135 008a 01       		.byte	0x1
 1136 008b 3F       		.uleb128 0x3f
 1137 008c 19       		.uleb128 0x19
 1138 008d 03       		.uleb128 0x3
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 27


 1139 008e 0E       		.uleb128 0xe
 1140 008f 3A       		.uleb128 0x3a
 1141 0090 0B       		.uleb128 0xb
 1142 0091 3B       		.uleb128 0x3b
 1143 0092 05       		.uleb128 0x5
 1144 0093 27       		.uleb128 0x27
 1145 0094 19       		.uleb128 0x19
 1146 0095 11       		.uleb128 0x11
 1147 0096 01       		.uleb128 0x1
 1148 0097 12       		.uleb128 0x12
 1149 0098 06       		.uleb128 0x6
 1150 0099 40       		.uleb128 0x40
 1151 009a 18       		.uleb128 0x18
 1152 009b 9642     		.uleb128 0x2116
 1153 009d 19       		.uleb128 0x19
 1154 009e 01       		.uleb128 0x1
 1155 009f 13       		.uleb128 0x13
 1156 00a0 00       		.byte	0
 1157 00a1 00       		.byte	0
 1158 00a2 0A       		.uleb128 0xa
 1159 00a3 05       		.uleb128 0x5
 1160 00a4 00       		.byte	0
 1161 00a5 03       		.uleb128 0x3
 1162 00a6 0E       		.uleb128 0xe
 1163 00a7 3A       		.uleb128 0x3a
 1164 00a8 0B       		.uleb128 0xb
 1165 00a9 3B       		.uleb128 0x3b
 1166 00aa 05       		.uleb128 0x5
 1167 00ab 49       		.uleb128 0x49
 1168 00ac 13       		.uleb128 0x13
 1169 00ad 02       		.uleb128 0x2
 1170 00ae 18       		.uleb128 0x18
 1171 00af 00       		.byte	0
 1172 00b0 00       		.byte	0
 1173 00b1 0B       		.uleb128 0xb
 1174 00b2 34       		.uleb128 0x34
 1175 00b3 00       		.byte	0
 1176 00b4 03       		.uleb128 0x3
 1177 00b5 0E       		.uleb128 0xe
 1178 00b6 3A       		.uleb128 0x3a
 1179 00b7 0B       		.uleb128 0xb
 1180 00b8 3B       		.uleb128 0x3b
 1181 00b9 05       		.uleb128 0x5
 1182 00ba 49       		.uleb128 0x49
 1183 00bb 13       		.uleb128 0x13
 1184 00bc 3F       		.uleb128 0x3f
 1185 00bd 19       		.uleb128 0x19
 1186 00be 3C       		.uleb128 0x3c
 1187 00bf 19       		.uleb128 0x19
 1188 00c0 00       		.byte	0
 1189 00c1 00       		.byte	0
 1190 00c2 0C       		.uleb128 0xc
 1191 00c3 35       		.uleb128 0x35
 1192 00c4 00       		.byte	0
 1193 00c5 49       		.uleb128 0x49
 1194 00c6 13       		.uleb128 0x13
 1195 00c7 00       		.byte	0
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 28


 1196 00c8 00       		.byte	0
 1197 00c9 0D       		.uleb128 0xd
 1198 00ca 34       		.uleb128 0x34
 1199 00cb 00       		.byte	0
 1200 00cc 03       		.uleb128 0x3
 1201 00cd 0E       		.uleb128 0xe
 1202 00ce 3A       		.uleb128 0x3a
 1203 00cf 0B       		.uleb128 0xb
 1204 00d0 3B       		.uleb128 0x3b
 1205 00d1 0B       		.uleb128 0xb
 1206 00d2 49       		.uleb128 0x49
 1207 00d3 13       		.uleb128 0x13
 1208 00d4 3F       		.uleb128 0x3f
 1209 00d5 19       		.uleb128 0x19
 1210 00d6 02       		.uleb128 0x2
 1211 00d7 18       		.uleb128 0x18
 1212 00d8 00       		.byte	0
 1213 00d9 00       		.byte	0
 1214 00da 0E       		.uleb128 0xe
 1215 00db 34       		.uleb128 0x34
 1216 00dc 00       		.byte	0
 1217 00dd 03       		.uleb128 0x3
 1218 00de 08       		.uleb128 0x8
 1219 00df 3A       		.uleb128 0x3a
 1220 00e0 0B       		.uleb128 0xb
 1221 00e1 3B       		.uleb128 0x3b
 1222 00e2 0B       		.uleb128 0xb
 1223 00e3 49       		.uleb128 0x49
 1224 00e4 13       		.uleb128 0x13
 1225 00e5 3F       		.uleb128 0x3f
 1226 00e6 19       		.uleb128 0x19
 1227 00e7 02       		.uleb128 0x2
 1228 00e8 18       		.uleb128 0x18
 1229 00e9 00       		.byte	0
 1230 00ea 00       		.byte	0
 1231 00eb 0F       		.uleb128 0xf
 1232 00ec 01       		.uleb128 0x1
 1233 00ed 01       		.byte	0x1
 1234 00ee 49       		.uleb128 0x49
 1235 00ef 13       		.uleb128 0x13
 1236 00f0 01       		.uleb128 0x1
 1237 00f1 13       		.uleb128 0x13
 1238 00f2 00       		.byte	0
 1239 00f3 00       		.byte	0
 1240 00f4 10       		.uleb128 0x10
 1241 00f5 21       		.uleb128 0x21
 1242 00f6 00       		.byte	0
 1243 00f7 49       		.uleb128 0x49
 1244 00f8 13       		.uleb128 0x13
 1245 00f9 2F       		.uleb128 0x2f
 1246 00fa 0B       		.uleb128 0xb
 1247 00fb 00       		.byte	0
 1248 00fc 00       		.byte	0
 1249 00fd 00       		.byte	0
 1250              		.section	.debug_aranges,"",%progbits
 1251 0000 34000000 		.4byte	0x34
 1252 0004 0200     		.2byte	0x2
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 29


 1253 0006 00000000 		.4byte	.Ldebug_info0
 1254 000a 04       		.byte	0x4
 1255 000b 00       		.byte	0
 1256 000c 0000     		.2byte	0
 1257 000e 0000     		.2byte	0
 1258 0010 00000000 		.4byte	.LFB64
 1259 0014 84000000 		.4byte	.LFE64-.LFB64
 1260 0018 00000000 		.4byte	.LFB65
 1261 001c 5C010000 		.4byte	.LFE65-.LFB65
 1262 0020 00000000 		.4byte	.LFB66
 1263 0024 38010000 		.4byte	.LFE66-.LFB66
 1264 0028 00000000 		.4byte	.LFB67
 1265 002c 44000000 		.4byte	.LFE67-.LFB67
 1266 0030 00000000 		.4byte	0
 1267 0034 00000000 		.4byte	0
 1268              		.section	.debug_ranges,"",%progbits
 1269              	.Ldebug_ranges0:
 1270 0000 00000000 		.4byte	.LFB64
 1271 0004 84000000 		.4byte	.LFE64
 1272 0008 00000000 		.4byte	.LFB65
 1273 000c 5C010000 		.4byte	.LFE65
 1274 0010 00000000 		.4byte	.LFB66
 1275 0014 38010000 		.4byte	.LFE66
 1276 0018 00000000 		.4byte	.LFB67
 1277 001c 44000000 		.4byte	.LFE67
 1278 0020 00000000 		.4byte	0
 1279 0024 00000000 		.4byte	0
 1280              		.section	.debug_line,"",%progbits
 1281              	.Ldebug_line0:
 1282 0000 2C020000 		.section	.debug_str,"MS",%progbits,1
 1282      02004C01 
 1282      00000201 
 1282      FB0E0D00 
 1282      01010101 
 1283              	.LASF35:
 1284 0000 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1284      43313120 
 1284      352E342E 
 1284      31203230 
 1284      31363036 
 1285 0033 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1285      20726576 
 1285      6973696F 
 1285      6E203233 
 1285      37373135 
 1286 0066 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1286      66756E63 
 1286      74696F6E 
 1286      2D736563 
 1286      74696F6E 
 1287              	.LASF28:
 1288 008e 6F6E6544 		.ascii	"oneDigit\000"
 1288      69676974 
 1288      00
 1289              	.LASF22:
 1290 0097 43616C63 		.ascii	"CalculateCrabs\000"
 1290      756C6174 
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 30


 1290      65437261 
 1290      627300
 1291              	.LASF9:
 1292 00a6 5F5F696E 		.ascii	"__int32_t\000"
 1292      7433325F 
 1292      7400
 1293              	.LASF29:
 1294 00b0 74776F44 		.ascii	"twoDigit\000"
 1294      69676974 
 1294      00
 1295              	.LASF13:
 1296 00b9 666C6F61 		.ascii	"float\000"
 1296      7400
 1297              	.LASF34:
 1298 00bf 64617461 		.ascii	"data\000"
 1298      00
 1299              	.LASF1:
 1300 00c4 756E7369 		.ascii	"unsigned char\000"
 1300      676E6564 
 1300      20636861 
 1300      7200
 1301              	.LASF15:
 1302 00d2 63686172 		.ascii	"char8\000"
 1302      3800
 1303              	.LASF5:
 1304 00d8 6C6F6E67 		.ascii	"long unsigned int\000"
 1304      20756E73 
 1304      69676E65 
 1304      6420696E 
 1304      7400
 1305              	.LASF3:
 1306 00ea 73686F72 		.ascii	"short unsigned int\000"
 1306      7420756E 
 1306      7369676E 
 1306      65642069 
 1306      6E7400
 1307              	.LASF25:
 1308 00fd 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1308      52784275 
 1308      66666572 
 1308      00
 1309              	.LASF14:
 1310 010a 646F7562 		.ascii	"double\000"
 1310      6C6500
 1311              	.LASF19:
 1312 0111 63726162 		.ascii	"crabs\000"
 1312      7300
 1313              	.LASF27:
 1314 0117 656E6446 		.ascii	"endFlag\000"
 1314      6C616700 
 1315              	.LASF21:
 1316 011f 47657443 		.ascii	"GetCrabs\000"
 1316      72616273 
 1316      00
 1317              	.LASF12:
 1318 0128 75696E74 		.ascii	"uint16\000"
 1318      313600
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 31


 1319              	.LASF24:
 1320 012f 44697370 		.ascii	"DisplayCrabs\000"
 1320      6C617943 
 1320      72616273 
 1320      00
 1321              	.LASF23:
 1322 013c 6D61696E 		.ascii	"main\000"
 1322      00
 1323              	.LASF8:
 1324 0141 756E7369 		.ascii	"unsigned int\000"
 1324      676E6564 
 1324      20696E74 
 1324      00
 1325              	.LASF7:
 1326 014e 6C6F6E67 		.ascii	"long long unsigned int\000"
 1326      206C6F6E 
 1326      6720756E 
 1326      7369676E 
 1326      65642069 
 1327              	.LASF37:
 1328 0165 433A5C55 		.ascii	"C:\\Users\\sdysart\\Documents\\UACS\\UACS\\HighFreq"
 1328      73657273 
 1328      5C736479 
 1328      73617274 
 1328      5C446F63 
 1329 0192 46534B5C 		.ascii	"FSK\\USBFS_UART.cydsn\000"
 1329      55534246 
 1329      535F5541 
 1329      52542E63 
 1329      7964736E 
 1330              	.LASF10:
 1331 01a7 696E7433 		.ascii	"int32_t\000"
 1331      325F7400 
 1332              	.LASF18:
 1333 01af 73697A65 		.ascii	"sizetype\000"
 1333      74797065 
 1333      00
 1334              	.LASF20:
 1335 01b8 67657474 		.ascii	"gettingData\000"
 1335      696E6744 
 1335      61746100 
 1336              	.LASF30:
 1337 01c4 6572726F 		.ascii	"error\000"
 1337      7200
 1338              	.LASF6:
 1339 01ca 6C6F6E67 		.ascii	"long long int\000"
 1339      206C6F6E 
 1339      6720696E 
 1339      7400
 1340              	.LASF36:
 1341 01d8 6D61696E 		.ascii	"main.c\000"
 1341      2E6300
 1342              	.LASF16:
 1343 01df 63686172 		.ascii	"char\000"
 1343      00
 1344              	.LASF31:
 1345 01e4 636F756E 		.ascii	"count\000"
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccOHdDXC.s 			page 32


 1345      7400
 1346              	.LASF2:
 1347 01ea 73686F72 		.ascii	"short int\000"
 1347      7420696E 
 1347      7400
 1348              	.LASF33:
 1349 01f4 62756666 		.ascii	"buffer\000"
 1349      657200
 1350              	.LASF11:
 1351 01fb 75696E74 		.ascii	"uint8\000"
 1351      3800
 1352              	.LASF4:
 1353 0201 6C6F6E67 		.ascii	"long int\000"
 1353      20696E74 
 1353      00
 1354              	.LASF17:
 1355 020a 6C6F6E67 		.ascii	"long double\000"
 1355      20646F75 
 1355      626C6500 
 1356              	.LASF0:
 1357 0216 7369676E 		.ascii	"signed char\000"
 1357      65642063 
 1357      68617200 
 1358              	.LASF26:
 1359 0222 70726F6D 		.ascii	"prompt\000"
 1359      707400
 1360              	.LASF32:
 1361 0229 6C696E65 		.ascii	"lineStr\000"
 1361      53747200 
 1362              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
