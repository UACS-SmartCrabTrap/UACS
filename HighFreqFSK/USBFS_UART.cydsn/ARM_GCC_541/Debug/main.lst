ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	prompt
  20              		.data
  21              		.align	2
  22              		.type	prompt, %object
  23              		.size	prompt, 4
  24              	prompt:
  25 0000 01000000 		.word	1
  26              		.global	endFlag
  27              		.bss
  28              		.align	2
  29              		.type	endFlag, %object
  30              		.size	endFlag, 4
  31              	endFlag:
  32 0000 00000000 		.space	4
  33              		.global	oneDigit
  34              		.align	2
  35              		.type	oneDigit, %object
  36              		.size	oneDigit, 4
  37              	oneDigit:
  38 0004 00000000 		.space	4
  39              		.global	twoDigit
  40              		.align	2
  41              		.type	twoDigit, %object
  42              		.size	twoDigit, 4
  43              	twoDigit:
  44 0008 00000000 		.space	4
  45              		.global	error
  46              		.align	2
  47              		.type	error, %object
  48              		.size	error, 4
  49              	error:
  50 000c 00000000 		.space	4
  51              		.global	i
  52              		.data
  53              		.align	2
  54              		.type	i, %object
  55              		.size	i, 4
  56              	i:
  57 0004 02000000 		.word	2
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 2


  58              		.global	dataDone
  59              		.align	2
  60              		.type	dataDone, %object
  61              		.size	dataDone, 4
  62              	dataDone:
  63 0008 01000000 		.word	1
  64              		.global	sendReady
  65              		.bss
  66              		.align	2
  67              		.type	sendReady, %object
  68              		.size	sendReady, 4
  69              	sendReady:
  70 0010 00000000 		.space	4
  71              		.comm	count,2,2
  72              		.global	countTx
  73              		.align	1
  74              		.type	countTx, %object
  75              		.size	countTx, 2
  76              	countTx:
  77 0014 0000     		.space	2
  78              		.comm	lineStr,20,4
  79              		.comm	buffer,64,4
  80              		.global	data
  81 0016 0000     		.align	2
  82              		.type	data, %object
  83              		.size	data, 3
  84              	data:
  85 0018 000000   		.space	3
  86              		.section	.rodata
  87              		.align	2
  88              	.LC0:
  89 0000 20202020 		.ascii	"                    \000"
  89      20202020 
  89      20202020 
  89      20202020 
  89      20202020 
  90 0015 000000   		.align	2
  91              	.LC1:
  92 0018 48656C6C 		.ascii	"Hello\000"
  92      6F00
  93 001e 0000     		.align	2
  94              	.LC2:
  95 0020 44617461 		.ascii	"Data Ready\000"
  95      20526561 
  95      647900
  96 002b 00       		.align	2
  97              	.LC3:
  98 002c 44617461 		.ascii	"Data Sent\000"
  98      2053656E 
  98      7400
  99              		.section	.text.main,"ax",%progbits
 100              		.align	2
 101              		.global	main
 102              		.thumb
 103              		.thumb_func
 104              		.type	main, %function
 105              	main:
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 3


 106              	.LFB64:
 107              		.file 1 "main.c"
   1:main.c        **** /*******************************************************************************
   2:main.c        **** * File Name: main.c
   3:main.c        **** * Editer: Stephanie Salazar
   4:main.c        **** * Created: 5/12/18
   5:main.c        **** * Revision: 5/15/18
   6:main.c        **** *
   7:main.c        **** * Description:
   8:main.c        **** *   Receives data from the hyper terminal up to MAX_CRABS.
   9:main.c        **** *   FSK is then started using the input data and then prompts the user for
  10:main.c        **** *   more data. The LCD Display shows the number of crabs sent.
  11:main.c        **** *
  12:main.c        **** * This code was taken from PSoC's USBFS_UART example code and edited to store
  13:main.c        **** * a number for sending to another PSoC
  14:main.c        **** *
  15:main.c        **** ********************************************************************************
  16:main.c        **** * Description:
  17:main.c        **** *   The component is enumerated as a Virtual Com port. Receives data from the 
  18:main.c        **** *   hyper terminal, then sends back the received data.
  19:main.c        **** *   For PSoC3/PSoC5LP, the LCD shows the line settings.
  20:main.c        **** *
  21:main.c        **** * Related Document:
  22:main.c        **** *  Universal Serial Bus Specification Revision 2.0
  23:main.c        **** *  Universal Serial Bus Class Definitions for Communications Devices
  24:main.c        **** *  Revision 1.2
  25:main.c        **** *
  26:main.c        **** ********************************************************************************
  27:main.c        **** * Copyright 2015, Cypress Semiconductor Corporation. All rights reserved.
  28:main.c        **** * This software is owned by Cypress Semiconductor Corporation and is protected
  29:main.c        **** * by and subject to worldwide patent and copyright laws and treaties.
  30:main.c        **** * Therefore, you may use this software only as provided in the license agreement
  31:main.c        **** * accompanying the software package from which you obtained this software.
  32:main.c        **** * CYPRESS AND ITS SUPPLIERS MAKE NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  33:main.c        **** * WITH REGARD TO THIS SOFTWARE, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
  34:main.c        **** * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  35:main.c        **** ********************************************************************************
  36:main.c        **** */
  37:main.c        **** 
  38:main.c        **** 
  39:main.c        **** #include <project.h>
  40:main.c        **** #include "stdio.h"
  41:main.c        **** #include "stdlib.h"
  42:main.c        **** 
  43:main.c        **** #define USBFS_DEVICE    (0u)
  44:main.c        **** 
  45:main.c        **** /* The buffer size is equal to the maximum packet size of the IN and OUT bulk
  46:main.c        **** * endpoints.
  47:main.c        **** */
  48:main.c        **** #define USBUART_BUFFER_SIZE (64u)
  49:main.c        **** #define LINE_STR_LENGTH     (20u)
  50:main.c        **** /* Change data size for sending longer data (n-1) */
  51:main.c        **** #define DATA_SIZE           (7u)
  52:main.c        **** /* Change max crabs to correlate with data size 2^(n) - 1 */
  53:main.c        **** #define MAX_CRABS           (127)
  54:main.c        **** /* Error used for user error */
  55:main.c        **** #define ERROR               (333u)
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 4


  56:main.c        **** 
  57:main.c        **** #define ZERO 0x0
  58:main.c        **** #define ONE 0x1
  59:main.c        **** #define TRUE 0x1
  60:main.c        **** #define FALSE 0x0
  61:main.c        **** #define DATA_LENGTH 4
  62:main.c        **** #define DECODE_VALUE 0x01
  63:main.c        **** #define WAITTIME 80
  64:main.c        **** #define PREFIX_BIT_LENGTH 6
  65:main.c        **** #define PREFIX_MESSAGE 0xFF
  66:main.c        **** 
  67:main.c        **** /*Function Prototypes*/
  68:main.c        **** int GetCrabs(void);
  69:main.c        **** int CalculateCrabs(void);
  70:main.c        **** void DisplayCrabs(int);
  71:main.c        **** 
  72:main.c        **** CY_ISR_PROTO(tx_done); // sleep timer interrupt from UART
  73:main.c        **** 
  74:main.c        **** /*Global Variables*/
  75:main.c        **** int prompt = 1;
  76:main.c        **** int endFlag = 0; // flag for end of user input
  77:main.c        **** int oneDigit = 0; // flag for end of input with one character
  78:main.c        **** int twoDigit = 0; // flag for end of input with two characters
  79:main.c        **** int error = 0; // flag for input error
  80:main.c        **** int i = 2; // to iterate through data array
  81:main.c        **** int dataDone = TRUE; // check if data is done sending
  82:main.c        **** int sendReady = FALSE;
  83:main.c        **** uint16 count;
  84:main.c        **** uint16 countTx = 0;
  85:main.c        **** char8 lineStr[LINE_STR_LENGTH];
  86:main.c        **** uint8 buffer[USBUART_BUFFER_SIZE];
  87:main.c        **** uint8 data[3] = {0};
  88:main.c        **** 
  89:main.c        **** 
  90:main.c        **** /*******************************************************************************
  91:main.c        **** * Function Name: main
  92:main.c        **** ********************************************************************************
  93:main.c        **** */
  94:main.c        **** int main()
  95:main.c        **** {
 108              		.loc 1 95 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 8
 111              		@ frame_needed = 1, uses_anonymous_args = 0
 112 0000 80B5     		push	{r7, lr}
 113              		.cfi_def_cfa_offset 8
 114              		.cfi_offset 7, -8
 115              		.cfi_offset 14, -4
 116 0002 82B0     		sub	sp, sp, #8
 117              		.cfi_def_cfa_offset 16
 118 0004 00AF     		add	r7, sp, #0
 119              		.cfi_def_cfa_register 7
  96:main.c        ****     int crabs = 0;
 120              		.loc 1 96 0
 121 0006 0023     		movs	r3, #0
 122 0008 7B60     		str	r3, [r7, #4]
  97:main.c        ****     int gettingData = TRUE;
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 5


 123              		.loc 1 97 0
 124 000a 0123     		movs	r3, #1
 125 000c 3B60     		str	r3, [r7]
  98:main.c        **** 
  99:main.c        ****     CyGlobalIntEnable; /* Enable global interrupts. */
 126              		.loc 1 99 0
 127              		.syntax unified
 128              	@ 99 "main.c" 1
 129 000e 62B6     		CPSIE   i
 130              	@ 0 "" 2
 100:main.c        ****     /*Block initializations*/
 101:main.c        ****     LCD_Start();
 131              		.loc 1 101 0
 132              		.thumb
 133              		.syntax unified
 134 0010 FFF7FEFF 		bl	LCD_Start
 102:main.c        **** 
 103:main.c        ****     /* Start USBFS and UART  */
 104:main.c        ****     USBUART_Start(USBFS_DEVICE, USBUART_5V_OPERATION);
 135              		.loc 1 104 0
 136 0014 0121     		movs	r1, #1
 137 0016 0020     		movs	r0, #0
 138 0018 FFF7FEFF 		bl	USBUART_Start
 105:main.c        ****     UART_Start();     
 139              		.loc 1 105 0
 140 001c FFF7FEFF 		bl	UART_Start
 106:main.c        ****     
 107:main.c        ****     tx_done_StartEx(tx_done);
 141              		.loc 1 107 0
 142 0020 2E48     		ldr	r0, .L11
 143 0022 FFF7FEFF 		bl	tx_done_StartEx
 108:main.c        **** 
 109:main.c        ****     /* Clear LCD line. */
 110:main.c        ****     LCD_Position(0u, 0u);
 144              		.loc 1 110 0
 145 0026 0021     		movs	r1, #0
 146 0028 0020     		movs	r0, #0
 147 002a FFF7FEFF 		bl	LCD_Position
 111:main.c        ****     LCD_PrintString("                    ");
 148              		.loc 1 111 0
 149 002e 2C48     		ldr	r0, .L11+4
 150 0030 FFF7FEFF 		bl	LCD_PrintString
 112:main.c        **** 
 113:main.c        ****     /* Output string on LCD. */
 114:main.c        ****     LCD_Position(0u, 0u);
 151              		.loc 1 114 0
 152 0034 0021     		movs	r1, #0
 153 0036 0020     		movs	r0, #0
 154 0038 FFF7FEFF 		bl	LCD_Position
 115:main.c        ****     LCD_PrintString("Hello");
 155              		.loc 1 115 0
 156 003c 2948     		ldr	r0, .L11+8
 157 003e FFF7FEFF 		bl	LCD_PrintString
 158              	.L10:
 116:main.c        **** 
 117:main.c        ****     for(;;)
 118:main.c        ****     {
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 6


 119:main.c        ****         gettingData = 1;
 159              		.loc 1 119 0
 160 0042 0123     		movs	r3, #1
 161 0044 3B60     		str	r3, [r7]
 120:main.c        ****         /* Start UART interface and fill array with 3 parameters until valid */
 121:main.c        ****         while(gettingData){
 162              		.loc 1 121 0
 163 0046 29E0     		b	.L2
 164              	.L6:
 122:main.c        ****             while(0u == GetCrabs()){
 123:main.c        ****                 if(sendReady == TRUE){
 165              		.loc 1 123 0
 166 0048 274B     		ldr	r3, .L11+12
 167 004a 1B68     		ldr	r3, [r3]
 168 004c 012B     		cmp	r3, #1
 169 004e 13D1     		bne	.L3
 124:main.c        ****                     while (0u == USBUART_CDCIsReady())
 170              		.loc 1 124 0
 171 0050 00BF     		nop
 172              	.L4:
 173              		.loc 1 124 0 is_stmt 0 discriminator 1
 174 0052 FFF7FEFF 		bl	USBUART_CDCIsReady
 175 0056 0346     		mov	r3, r0
 176 0058 002B     		cmp	r3, #0
 177 005a FAD0     		beq	.L4
 125:main.c        ****                     {
 126:main.c        ****                     }
 127:main.c        ****                     USBUART_PutString("Data Ready");
 178              		.loc 1 127 0 is_stmt 1
 179 005c 2348     		ldr	r0, .L11+16
 180 005e FFF7FEFF 		bl	USBUART_PutString
 128:main.c        ****                     sendReady = FALSE;
 181              		.loc 1 128 0
 182 0062 214B     		ldr	r3, .L11+12
 183 0064 0022     		movs	r2, #0
 184 0066 1A60     		str	r2, [r3]
 129:main.c        ****                     /* Wait until component is ready to send data to host. */
 130:main.c        ****                     while (0u == USBUART_CDCIsReady())
 185              		.loc 1 130 0
 186 0068 00BF     		nop
 187              	.L5:
 188              		.loc 1 130 0 is_stmt 0 discriminator 1
 189 006a FFF7FEFF 		bl	USBUART_CDCIsReady
 190 006e 0346     		mov	r3, r0
 191 0070 002B     		cmp	r3, #0
 192 0072 FAD0     		beq	.L5
 131:main.c        ****                     {
 132:main.c        ****                     }
 133:main.c        ****                     USBUART_PutCRLF();
 193              		.loc 1 133 0 is_stmt 1
 194 0074 FFF7FEFF 		bl	USBUART_PutCRLF
 195              	.L3:
 122:main.c        ****                 if(sendReady == TRUE){
 196              		.loc 1 122 0
 197 0078 FFF7FEFF 		bl	GetCrabs
 198 007c 0346     		mov	r3, r0
 199 007e 002B     		cmp	r3, #0
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 7


 200 0080 E2D0     		beq	.L6
 134:main.c        ****                 }
 135:main.c        ****             }
 136:main.c        ****             crabs = CalculateCrabs();
 201              		.loc 1 136 0
 202 0082 FFF7FEFF 		bl	CalculateCrabs
 203 0086 7860     		str	r0, [r7, #4]
 137:main.c        ****             if(crabs != ERROR){
 204              		.loc 1 137 0
 205 0088 7B68     		ldr	r3, [r7, #4]
 206 008a 40F24D12 		movw	r2, #333
 207 008e 9342     		cmp	r3, r2
 208 0090 04D0     		beq	.L2
 138:main.c        ****                 DisplayCrabs(crabs);
 209              		.loc 1 138 0
 210 0092 7868     		ldr	r0, [r7, #4]
 211 0094 FFF7FEFF 		bl	DisplayCrabs
 139:main.c        ****                 gettingData = 0;
 212              		.loc 1 139 0
 213 0098 0023     		movs	r3, #0
 214 009a 3B60     		str	r3, [r7]
 215              	.L2:
 121:main.c        ****             while(0u == GetCrabs()){
 216              		.loc 1 121 0
 217 009c 3B68     		ldr	r3, [r7]
 218 009e 002B     		cmp	r3, #0
 219 00a0 EAD1     		bne	.L3
 140:main.c        ****             }
 141:main.c        ****         }
 142:main.c        ****         UART_PutChar(crabs); 
 220              		.loc 1 142 0
 221 00a2 7B68     		ldr	r3, [r7, #4]
 222 00a4 DBB2     		uxtb	r3, r3
 223 00a6 1846     		mov	r0, r3
 224 00a8 FFF7FEFF 		bl	UART_PutChar
 143:main.c        ****         dataDone = FALSE;
 225              		.loc 1 143 0
 226 00ac 104B     		ldr	r3, .L11+20
 227 00ae 0022     		movs	r2, #0
 228 00b0 1A60     		str	r2, [r3]
 144:main.c        ****         while (0u == USBUART_CDCIsReady())
 229              		.loc 1 144 0
 230 00b2 00BF     		nop
 231              	.L8:
 232              		.loc 1 144 0 is_stmt 0 discriminator 1
 233 00b4 FFF7FEFF 		bl	USBUART_CDCIsReady
 234 00b8 0346     		mov	r3, r0
 235 00ba 002B     		cmp	r3, #0
 236 00bc FAD0     		beq	.L8
 145:main.c        ****         {
 146:main.c        ****         }
 147:main.c        ****         USBUART_PutString("Data Sent");
 237              		.loc 1 147 0 is_stmt 1
 238 00be 0D48     		ldr	r0, .L11+24
 239 00c0 FFF7FEFF 		bl	USBUART_PutString
 148:main.c        ****         while (0u == USBUART_CDCIsReady())
 240              		.loc 1 148 0
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 8


 241 00c4 00BF     		nop
 242              	.L9:
 243              		.loc 1 148 0 is_stmt 0 discriminator 1
 244 00c6 FFF7FEFF 		bl	USBUART_CDCIsReady
 245 00ca 0346     		mov	r3, r0
 246 00cc 002B     		cmp	r3, #0
 247 00ce FAD0     		beq	.L9
 149:main.c        ****         {
 150:main.c        ****         }
 151:main.c        ****         USBUART_PutCRLF();
 248              		.loc 1 151 0 is_stmt 1
 249 00d0 FFF7FEFF 		bl	USBUART_PutCRLF
 152:main.c        ****         Data_Timer_Start();
 250              		.loc 1 152 0
 251 00d4 FFF7FEFF 		bl	Data_Timer_Start
 153:main.c        ****             
 154:main.c        ****     } // end for(;;)
 252              		.loc 1 154 0
 253 00d8 B3E7     		b	.L10
 254              	.L12:
 255 00da 00BF     		.align	2
 256              	.L11:
 257 00dc 00000000 		.word	tx_done
 258 00e0 00000000 		.word	.LC0
 259 00e4 18000000 		.word	.LC1
 260 00e8 00000000 		.word	sendReady
 261 00ec 20000000 		.word	.LC2
 262 00f0 00000000 		.word	dataDone
 263 00f4 2C000000 		.word	.LC3
 264              		.cfi_endproc
 265              	.LFE64:
 266              		.size	main, .-main
 267              		.section	.rodata
 268 0036 0000     		.align	2
 269              	.LC4:
 270 0038 506C6561 		.ascii	"Please enter amount of crabs (up to 127). Terminate"
 270      73652065 
 270      6E746572 
 270      20616D6F 
 270      756E7420 
 271 006b 73207769 		.ascii	"s with carriage return or third character. Any non-"
 271      74682063 
 271      61727269 
 271      61676520 
 271      72657475 
 272 009e 696E7465 		.ascii	"integer will be interpreted as a 0.\000"
 272      67657220 
 272      77696C6C 
 272      20626520 
 272      696E7465 
 273 00c2 0000     		.align	2
 274              	.LC5:
 275 00c4 3000     		.ascii	"0\000"
 276 00c6 0000     		.align	2
 277              	.LC6:
 278 00c8 0D00     		.ascii	"\015\000"
 279              		.section	.text.GetCrabs,"ax",%progbits
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 9


 280              		.align	2
 281              		.global	GetCrabs
 282              		.thumb
 283              		.thumb_func
 284              		.type	GetCrabs, %function
 285              	GetCrabs:
 286              	.LFB65:
 155:main.c        **** } // end main
 156:main.c        **** 
 157:main.c        **** 
 158:main.c        **** /*******************************************************************************************
 159:main.c        ****  * function: int GetCrabs()
 160:main.c        ****  * parameters: hex_value - an 8 bit (1 byte) value specifying what data you want to send
 161:main.c        ****  *             bT - the current bit time
 162:main.c        ****  * returns: bitCase - a high or low signal to be sent to an output pin
 163:main.c        ****  * description: This function starts UART interface and waits for a valid amount of crabs
 164:main.c        ****  * entered by user
 165:main.c        ****  *******************************************************************************************
 166:main.c        ****  */
 167:main.c        **** int GetCrabs()
 168:main.c        **** {
 287              		.loc 1 168 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 8
 290              		@ frame_needed = 1, uses_anonymous_args = 0
 291 0000 90B5     		push	{r4, r7, lr}
 292              		.cfi_def_cfa_offset 12
 293              		.cfi_offset 4, -12
 294              		.cfi_offset 7, -8
 295              		.cfi_offset 14, -4
 296 0002 83B0     		sub	sp, sp, #12
 297              		.cfi_def_cfa_offset 24
 298 0004 00AF     		add	r7, sp, #0
 299              		.cfi_def_cfa_register 7
 169:main.c        ****     uint16 crabs = 0;
 300              		.loc 1 169 0
 301 0006 0023     		movs	r3, #0
 302 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 170:main.c        ****     /* Host can send double SET_INTERFACE request. */
 171:main.c        ****     if (0u != USBUART_IsConfigurationChanged())
 303              		.loc 1 171 0
 304 000a FFF7FEFF 		bl	USBUART_IsConfigurationChanged
 305 000e 0346     		mov	r3, r0
 306 0010 002B     		cmp	r3, #0
 307 0012 06D0     		beq	.L14
 172:main.c        ****     {
 173:main.c        ****         /* Initialize IN endpoints when device is configured. */
 174:main.c        ****         if (0u != USBUART_GetConfiguration())
 308              		.loc 1 174 0
 309 0014 FFF7FEFF 		bl	USBUART_GetConfiguration
 310 0018 0346     		mov	r3, r0
 311 001a 002B     		cmp	r3, #0
 312 001c 01D0     		beq	.L14
 175:main.c        ****         {
 176:main.c        ****             /* Enumeration is done, enable OUT endpoint to receive data 
 177:main.c        ****             * from host. */
 178:main.c        ****             USBUART_CDC_Init();
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 10


 313              		.loc 1 178 0
 314 001e FFF7FEFF 		bl	USBUART_CDC_Init
 315              	.L14:
 179:main.c        ****         }
 180:main.c        ****     }
 181:main.c        **** 
 182:main.c        ****         /* Service USB CDC when device is configured. */
 183:main.c        ****         if (0u != USBUART_GetConfiguration())
 316              		.loc 1 183 0
 317 0022 FFF7FEFF 		bl	USBUART_GetConfiguration
 318 0026 0346     		mov	r3, r0
 319 0028 002B     		cmp	r3, #0
 320 002a 77D0     		beq	.L15
 184:main.c        ****         {
 185:main.c        ****             /* Wait until component is ready to send data to host. */
 186:main.c        ****             while (0u == USBUART_CDCIsReady())
 321              		.loc 1 186 0
 322 002c 00BF     		nop
 323              	.L16:
 324              		.loc 1 186 0 is_stmt 0 discriminator 1
 325 002e FFF7FEFF 		bl	USBUART_CDCIsReady
 326 0032 0346     		mov	r3, r0
 327 0034 002B     		cmp	r3, #0
 328 0036 FAD0     		beq	.L16
 187:main.c        ****                 {
 188:main.c        ****                 }
 189:main.c        ****             if(prompt == TRUE){
 329              		.loc 1 189 0 is_stmt 1
 330 0038 3E4B     		ldr	r3, .L31
 331 003a 1B68     		ldr	r3, [r3]
 332 003c 012B     		cmp	r3, #1
 333 003e 02D1     		bne	.L30
 190:main.c        ****                 USBUART_PutString("Please enter amount of crabs (up to 127). Terminates with carria
 334              		.loc 1 190 0
 335 0040 3D48     		ldr	r0, .L31+4
 336 0042 FFF7FEFF 		bl	USBUART_PutString
 337              	.L30:
 191:main.c        ****             }
 192:main.c        ****             /* Wait until component is ready to send data to host. */
 193:main.c        ****             while (0u == USBUART_CDCIsReady())
 338              		.loc 1 193 0
 339 0046 00BF     		nop
 340              	.L18:
 341              		.loc 1 193 0 is_stmt 0 discriminator 1
 342 0048 FFF7FEFF 		bl	USBUART_CDCIsReady
 343 004c 0346     		mov	r3, r0
 344 004e 002B     		cmp	r3, #0
 345 0050 FAD0     		beq	.L18
 194:main.c        ****                 {
 195:main.c        ****                 }
 196:main.c        ****             if(prompt == TRUE){
 346              		.loc 1 196 0 is_stmt 1
 347 0052 384B     		ldr	r3, .L31
 348 0054 1B68     		ldr	r3, [r3]
 349 0056 012B     		cmp	r3, #1
 350 0058 04D1     		bne	.L19
 197:main.c        ****                 USBUART_PutCRLF();
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 11


 351              		.loc 1 197 0
 352 005a FFF7FEFF 		bl	USBUART_PutCRLF
 198:main.c        ****                 prompt = 0;
 353              		.loc 1 198 0
 354 005e 354B     		ldr	r3, .L31
 355 0060 0022     		movs	r2, #0
 356 0062 1A60     		str	r2, [r3]
 357              	.L19:
 199:main.c        ****             }
 200:main.c        ****                 
 201:main.c        ****             /* Check for input data from host. */
 202:main.c        ****             if (0u != USBUART_DataIsReady())
 358              		.loc 1 202 0
 359 0064 FFF7FEFF 		bl	USBUART_DataIsReady
 360 0068 0346     		mov	r3, r0
 361 006a 002B     		cmp	r3, #0
 362 006c 56D0     		beq	.L15
 203:main.c        ****             {
 204:main.c        ****                 /* Read received data and re-enable OUT endpoint. */
 205:main.c        ****                 count = USBUART_GetAll(buffer);
 363              		.loc 1 205 0
 364 006e 3348     		ldr	r0, .L31+8
 365 0070 FFF7FEFF 		bl	USBUART_GetAll
 366 0074 0346     		mov	r3, r0
 367 0076 1A46     		mov	r2, r3
 368 0078 314B     		ldr	r3, .L31+12
 369 007a 1A80     		strh	r2, [r3]	@ movhi
 206:main.c        ****     
 207:main.c        ****                 if (strncmp (buffer,"0",1) == 0){
 208:main.c        ****                     //USBUART_PutString("True Zero");
 209:main.c        ****                 }
 210:main.c        ****                 if (strncmp (buffer,"\r",1) == 0){
 370              		.loc 1 210 0
 371 007c 2F4B     		ldr	r3, .L31+8
 372 007e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 373 0080 304B     		ldr	r3, .L31+16
 374 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 375 0084 9A42     		cmp	r2, r3
 376 0086 12D1     		bne	.L20
 211:main.c        ****                     //USBUART_PutString("Carriage Return");
 212:main.c        **** 
 213:main.c        ****                     if(i == 1){
 377              		.loc 1 213 0
 378 0088 2F4B     		ldr	r3, .L31+20
 379 008a 1B68     		ldr	r3, [r3]
 380 008c 012B     		cmp	r3, #1
 381 008e 03D1     		bne	.L21
 214:main.c        ****                         oneDigit = 1;
 382              		.loc 1 214 0
 383 0090 2E4B     		ldr	r3, .L31+24
 384 0092 0122     		movs	r2, #1
 385 0094 1A60     		str	r2, [r3]
 386 0096 06E0     		b	.L22
 387              	.L21:
 215:main.c        ****                     }else if(i == 0){
 388              		.loc 1 215 0
 389 0098 2B4B     		ldr	r3, .L31+20
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 12


 390 009a 1B68     		ldr	r3, [r3]
 391 009c 002B     		cmp	r3, #0
 392 009e 02D1     		bne	.L22
 216:main.c        ****                         twoDigit = 1;
 393              		.loc 1 216 0
 394 00a0 2B4B     		ldr	r3, .L31+28
 395 00a2 0122     		movs	r2, #1
 396 00a4 1A60     		str	r2, [r3]
 397              	.L22:
 217:main.c        ****                     }
 218:main.c        ****                     endFlag = 1; // set flag to add numbers
 398              		.loc 1 218 0
 399 00a6 2B4B     		ldr	r3, .L31+32
 400 00a8 0122     		movs	r2, #1
 401 00aa 1A60     		str	r2, [r3]
 402 00ac 08E0     		b	.L23
 403              	.L20:
 219:main.c        ****                 }else{
 220:main.c        ****                     // Convert string to int
 221:main.c        ****                     data[i] = (uint8)atoi(buffer);
 404              		.loc 1 221 0
 405 00ae 264B     		ldr	r3, .L31+20
 406 00b0 1C68     		ldr	r4, [r3]
 407 00b2 2248     		ldr	r0, .L31+8
 408 00b4 FFF7FEFF 		bl	atoi
 409 00b8 0346     		mov	r3, r0
 410 00ba DAB2     		uxtb	r2, r3
 411 00bc 264B     		ldr	r3, .L31+36
 412 00be 1A55     		strb	r2, [r3, r4]
 413              	.L23:
 222:main.c        ****                 }
 223:main.c        ****                 
 224:main.c        ****                 /* Make sure data array stays in bounds (size = 3) */
 225:main.c        ****                 if(i == 0){
 414              		.loc 1 225 0
 415 00c0 214B     		ldr	r3, .L31+20
 416 00c2 1B68     		ldr	r3, [r3]
 417 00c4 002B     		cmp	r3, #0
 418 00c6 06D1     		bne	.L24
 226:main.c        ****                     i = 2;
 419              		.loc 1 226 0
 420 00c8 1F4B     		ldr	r3, .L31+20
 421 00ca 0222     		movs	r2, #2
 422 00cc 1A60     		str	r2, [r3]
 227:main.c        ****                     endFlag = 1; // 3 characters have been entered
 423              		.loc 1 227 0
 424 00ce 214B     		ldr	r3, .L31+32
 425 00d0 0122     		movs	r2, #1
 426 00d2 1A60     		str	r2, [r3]
 427 00d4 04E0     		b	.L25
 428              	.L24:
 228:main.c        ****                 }else{
 229:main.c        ****                     i--;
 429              		.loc 1 229 0
 430 00d6 1C4B     		ldr	r3, .L31+20
 431 00d8 1B68     		ldr	r3, [r3]
 432 00da 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 13


 433 00dc 1A4A     		ldr	r2, .L31+20
 434 00de 1360     		str	r3, [r2]
 435              	.L25:
 230:main.c        ****                 }
 231:main.c        ****                 
 232:main.c        ****                 if (0u != count)
 436              		.loc 1 232 0
 437 00e0 174B     		ldr	r3, .L31+12
 438 00e2 1B88     		ldrh	r3, [r3]
 439 00e4 002B     		cmp	r3, #0
 440 00e6 19D0     		beq	.L15
 233:main.c        ****                 {
 234:main.c        ****                     /* Wait until component is ready to send data to host. */
 235:main.c        ****                     while (0u == USBUART_CDCIsReady())
 441              		.loc 1 235 0
 442 00e8 00BF     		nop
 443              	.L26:
 444              		.loc 1 235 0 is_stmt 0 discriminator 1
 445 00ea FFF7FEFF 		bl	USBUART_CDCIsReady
 446 00ee 0346     		mov	r3, r0
 447 00f0 002B     		cmp	r3, #0
 448 00f2 FAD0     		beq	.L26
 236:main.c        ****                     {
 237:main.c        ****                     }
 238:main.c        **** 
 239:main.c        ****                     /* Send data back to PC */
 240:main.c        ****                     USBUART_PutData(buffer, count);
 449              		.loc 1 240 0 is_stmt 1
 450 00f4 124B     		ldr	r3, .L31+12
 451 00f6 1B88     		ldrh	r3, [r3]
 452 00f8 1946     		mov	r1, r3
 453 00fa 1048     		ldr	r0, .L31+8
 454 00fc FFF7FEFF 		bl	USBUART_PutData
 241:main.c        **** 
 242:main.c        ****                     /* If the last sent packet is exactly the maximum packet 
 243:main.c        ****                     *  size, it is followed by a zero-length packet to assure
 244:main.c        ****                     *  that the end of the segment is properly identified by 
 245:main.c        ****                     *  the terminal.
 246:main.c        ****                     */
 247:main.c        ****                     if (USBUART_BUFFER_SIZE == count)
 455              		.loc 1 247 0
 456 0100 0F4B     		ldr	r3, .L31+12
 457 0102 1B88     		ldrh	r3, [r3]
 458 0104 402B     		cmp	r3, #64
 459 0106 09D1     		bne	.L15
 248:main.c        ****                     {
 249:main.c        ****                         /* Wait until component is ready to send data to PC. */
 250:main.c        ****                         while (0u == USBUART_CDCIsReady())
 460              		.loc 1 250 0
 461 0108 00BF     		nop
 462              	.L27:
 463              		.loc 1 250 0 is_stmt 0 discriminator 1
 464 010a FFF7FEFF 		bl	USBUART_CDCIsReady
 465 010e 0346     		mov	r3, r0
 466 0110 002B     		cmp	r3, #0
 467 0112 FAD0     		beq	.L27
 251:main.c        ****                         {
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 14


 252:main.c        ****                         }
 253:main.c        **** 
 254:main.c        ****                         /* Send zero-length packet to PC. */
 255:main.c        ****                         USBUART_PutData(NULL, 0u);
 468              		.loc 1 255 0 is_stmt 1
 469 0114 0021     		movs	r1, #0
 470 0116 0020     		movs	r0, #0
 471 0118 FFF7FEFF 		bl	USBUART_PutData
 472              	.L15:
 256:main.c        ****                     }
 257:main.c        ****                 }
 258:main.c        ****             } // end (0u != USBUART_DataIsReady())
 259:main.c        ****         } // end (0u != USBUART_GetConfiguration())
 260:main.c        ****     if(endFlag == 1){
 473              		.loc 1 260 0
 474 011c 0D4B     		ldr	r3, .L31+32
 475 011e 1B68     		ldr	r3, [r3]
 476 0120 012B     		cmp	r3, #1
 477 0122 01D1     		bne	.L28
 261:main.c        ****         return 1;
 478              		.loc 1 261 0
 479 0124 0123     		movs	r3, #1
 480 0126 00E0     		b	.L29
 481              	.L28:
 262:main.c        ****     }else{
 263:main.c        ****         return 0;
 482              		.loc 1 263 0
 483 0128 0023     		movs	r3, #0
 484              	.L29:
 264:main.c        ****     }
 265:main.c        **** }//end GetCrabs()
 485              		.loc 1 265 0
 486 012a 1846     		mov	r0, r3
 487 012c 0C37     		adds	r7, r7, #12
 488              		.cfi_def_cfa_offset 12
 489 012e BD46     		mov	sp, r7
 490              		.cfi_def_cfa_register 13
 491              		@ sp needed
 492 0130 90BD     		pop	{r4, r7, pc}
 493              	.L32:
 494 0132 00BF     		.align	2
 495              	.L31:
 496 0134 00000000 		.word	prompt
 497 0138 38000000 		.word	.LC4
 498 013c 00000000 		.word	buffer
 499 0140 00000000 		.word	count
 500 0144 C8000000 		.word	.LC6
 501 0148 00000000 		.word	i
 502 014c 00000000 		.word	oneDigit
 503 0150 00000000 		.word	twoDigit
 504 0154 00000000 		.word	endFlag
 505 0158 00000000 		.word	data
 506              		.cfi_endproc
 507              	.LFE65:
 508              		.size	GetCrabs, .-GetCrabs
 509              		.section	.rodata
 510 00ca 0000     		.align	2
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 15


 511              	.LC7:
 512 00cc 4572726F 		.ascii	"Error. Not Ready for new data.\000"
 512      722E204E 
 512      6F742052 
 512      65616479 
 512      20666F72 
 513 00eb 00       		.align	2
 514              	.LC8:
 515 00ec 4572726F 		.ascii	"Error. Please enter a number UP TO 127\000"
 515      722E2050 
 515      6C656173 
 515      6520656E 
 515      74657220 
 516              		.section	.text.CalculateCrabs,"ax",%progbits
 517              		.align	2
 518              		.global	CalculateCrabs
 519              		.thumb
 520              		.thumb_func
 521              		.type	CalculateCrabs, %function
 522              	CalculateCrabs:
 523              	.LFB66:
 266:main.c        **** 
 267:main.c        **** /*******************************************************************************************
 268:main.c        ****  * function: int CalculateCrabs()
 269:main.c        ****  * parameters: none
 270:main.c        ****  * returns: int crabs - amount of crabs from user input 
 271:main.c        ****  * description: This function takes an array of size three and converts
 272:main.c        ****  * to a single number
 273:main.c        ****  *******************************************************************************************
 274:main.c        ****  */
 275:main.c        **** int CalculateCrabs()
 276:main.c        **** {
 524              		.loc 1 276 0
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 8
 527              		@ frame_needed = 1, uses_anonymous_args = 0
 528 0000 80B5     		push	{r7, lr}
 529              		.cfi_def_cfa_offset 8
 530              		.cfi_offset 7, -8
 531              		.cfi_offset 14, -4
 532 0002 82B0     		sub	sp, sp, #8
 533              		.cfi_def_cfa_offset 16
 534 0004 00AF     		add	r7, sp, #0
 535              		.cfi_def_cfa_register 7
 277:main.c        ****     int crabs;
 278:main.c        ****     /* Wait until component is ready to send data to host. */
 279:main.c        ****     while (0u == USBUART_CDCIsReady())
 536              		.loc 1 279 0
 537 0006 00BF     		nop
 538              	.L34:
 539              		.loc 1 279 0 is_stmt 0 discriminator 1
 540 0008 FFF7FEFF 		bl	USBUART_CDCIsReady
 541 000c 0346     		mov	r3, r0
 542 000e 002B     		cmp	r3, #0
 543 0010 FAD0     		beq	.L34
 280:main.c        ****     {
 281:main.c        ****     }
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 16


 282:main.c        ****     USBUART_PutCRLF();
 544              		.loc 1 282 0 is_stmt 1
 545 0012 FFF7FEFF 		bl	USBUART_PutCRLF
 283:main.c        ****     /* Shift data if carriage return was pressed */
 284:main.c        ****     if(oneDigit == 1){
 546              		.loc 1 284 0
 547 0016 4E4B     		ldr	r3, .L46
 548 0018 1B68     		ldr	r3, [r3]
 549 001a 012B     		cmp	r3, #1
 550 001c 0AD1     		bne	.L35
 285:main.c        ****         //USBUART_PutString("one digit");
 286:main.c        ****         data[0] = data[2];
 551              		.loc 1 286 0
 552 001e 4D4B     		ldr	r3, .L46+4
 553 0020 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 554 0022 4C4B     		ldr	r3, .L46+4
 555 0024 1A70     		strb	r2, [r3]
 287:main.c        ****         data[2] = 0;
 556              		.loc 1 287 0
 557 0026 4B4B     		ldr	r3, .L46+4
 558 0028 0022     		movs	r2, #0
 559 002a 9A70     		strb	r2, [r3, #2]
 288:main.c        ****         oneDigit = 0;
 560              		.loc 1 288 0
 561 002c 484B     		ldr	r3, .L46
 562 002e 0022     		movs	r2, #0
 563 0030 1A60     		str	r2, [r3]
 564 0032 11E0     		b	.L36
 565              	.L35:
 289:main.c        ****     }else if(twoDigit == 1){
 566              		.loc 1 289 0
 567 0034 484B     		ldr	r3, .L46+8
 568 0036 1B68     		ldr	r3, [r3]
 569 0038 012B     		cmp	r3, #1
 570 003a 0DD1     		bne	.L36
 290:main.c        ****         //USBUART_PutString("two digits");
 291:main.c        ****         data[0] = data[1];
 571              		.loc 1 291 0
 572 003c 454B     		ldr	r3, .L46+4
 573 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 574 0040 444B     		ldr	r3, .L46+4
 575 0042 1A70     		strb	r2, [r3]
 292:main.c        ****         data[1] = data[2];
 576              		.loc 1 292 0
 577 0044 434B     		ldr	r3, .L46+4
 578 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 579 0048 424B     		ldr	r3, .L46+4
 580 004a 5A70     		strb	r2, [r3, #1]
 293:main.c        ****         data[2] = 0;
 581              		.loc 1 293 0
 582 004c 414B     		ldr	r3, .L46+4
 583 004e 0022     		movs	r2, #0
 584 0050 9A70     		strb	r2, [r3, #2]
 294:main.c        ****         twoDigit = 0;
 585              		.loc 1 294 0
 586 0052 414B     		ldr	r3, .L46+8
 587 0054 0022     		movs	r2, #0
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 17


 588 0056 1A60     		str	r2, [r3]
 589              	.L36:
 295:main.c        ****     }
 296:main.c        ****     /* Apply digit place to integer */
 297:main.c        ****     data[0] = data[0] * 1;
 590              		.loc 1 297 0
 591 0058 3E4B     		ldr	r3, .L46+4
 592 005a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 593 005c 3D4B     		ldr	r3, .L46+4
 594 005e 1A70     		strb	r2, [r3]
 298:main.c        ****     data[1] = data[1] * 10;
 595              		.loc 1 298 0
 596 0060 3C4B     		ldr	r3, .L46+4
 597 0062 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 598 0064 1A46     		mov	r2, r3
 599 0066 9200     		lsls	r2, r2, #2
 600 0068 1344     		add	r3, r3, r2
 601 006a 5B00     		lsls	r3, r3, #1
 602 006c DAB2     		uxtb	r2, r3
 603 006e 394B     		ldr	r3, .L46+4
 604 0070 5A70     		strb	r2, [r3, #1]
 299:main.c        ****     data[2] = data[2] * 100;
 605              		.loc 1 299 0
 606 0072 384B     		ldr	r3, .L46+4
 607 0074 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 608 0076 1A46     		mov	r2, r3
 609 0078 9200     		lsls	r2, r2, #2
 610 007a 1344     		add	r3, r3, r2
 611 007c 1A46     		mov	r2, r3
 612 007e 9100     		lsls	r1, r2, #2
 613 0080 1A46     		mov	r2, r3
 614 0082 0B46     		mov	r3, r1
 615 0084 1344     		add	r3, r3, r2
 616 0086 9B00     		lsls	r3, r3, #2
 617 0088 DAB2     		uxtb	r2, r3
 618 008a 324B     		ldr	r3, .L46+4
 619 008c 9A70     		strb	r2, [r3, #2]
 300:main.c        ****     crabs = data[0] + data[1] + data[2];
 620              		.loc 1 300 0
 621 008e 314B     		ldr	r3, .L46+4
 622 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 623 0092 1A46     		mov	r2, r3
 624 0094 2F4B     		ldr	r3, .L46+4
 625 0096 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 626 0098 1344     		add	r3, r3, r2
 627 009a 2E4A     		ldr	r2, .L46+4
 628 009c 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 629 009e 1344     		add	r3, r3, r2
 630 00a0 7B60     		str	r3, [r7, #4]
 301:main.c        ****     if(dataDone == FALSE){
 631              		.loc 1 301 0
 632 00a2 2E4B     		ldr	r3, .L46+12
 633 00a4 1B68     		ldr	r3, [r3]
 634 00a6 002B     		cmp	r3, #0
 635 00a8 13D1     		bne	.L37
 302:main.c        ****         error = TRUE;
 636              		.loc 1 302 0
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 18


 637 00aa 2D4B     		ldr	r3, .L46+16
 638 00ac 0122     		movs	r2, #1
 639 00ae 1A60     		str	r2, [r3]
 303:main.c        ****         /* Wait until component is ready to send data to host. */
 304:main.c        ****         while (0u == USBUART_CDCIsReady())
 640              		.loc 1 304 0
 641 00b0 00BF     		nop
 642              	.L38:
 643              		.loc 1 304 0 is_stmt 0 discriminator 1
 644 00b2 FFF7FEFF 		bl	USBUART_CDCIsReady
 645 00b6 0346     		mov	r3, r0
 646 00b8 002B     		cmp	r3, #0
 647 00ba FAD0     		beq	.L38
 305:main.c        ****         {
 306:main.c        ****         }
 307:main.c        ****         USBUART_PutString("Error. Not Ready for new data.");
 648              		.loc 1 307 0 is_stmt 1
 649 00bc 2948     		ldr	r0, .L46+20
 650 00be FFF7FEFF 		bl	USBUART_PutString
 308:main.c        ****         /* Wait until component is ready to send data to host. */
 309:main.c        ****         while (0u == USBUART_CDCIsReady())
 651              		.loc 1 309 0
 652 00c2 00BF     		nop
 653              	.L39:
 654              		.loc 1 309 0 is_stmt 0 discriminator 1
 655 00c4 FFF7FEFF 		bl	USBUART_CDCIsReady
 656 00c8 0346     		mov	r3, r0
 657 00ca 002B     		cmp	r3, #0
 658 00cc FAD0     		beq	.L39
 310:main.c        ****         {
 311:main.c        ****         }
 312:main.c        ****         USBUART_PutCRLF();
 659              		.loc 1 312 0 is_stmt 1
 660 00ce FFF7FEFF 		bl	USBUART_PutCRLF
 661              	.L37:
 313:main.c        ****     }
 314:main.c        ****     if(crabs > MAX_CRABS){
 662              		.loc 1 314 0
 663 00d2 7B68     		ldr	r3, [r7, #4]
 664 00d4 7F2B     		cmp	r3, #127
 665 00d6 15DD     		ble	.L40
 315:main.c        ****         crabs = 0;
 666              		.loc 1 315 0
 667 00d8 0023     		movs	r3, #0
 668 00da 7B60     		str	r3, [r7, #4]
 316:main.c        ****         error = TRUE;
 669              		.loc 1 316 0
 670 00dc 204B     		ldr	r3, .L46+16
 671 00de 0122     		movs	r2, #1
 672 00e0 1A60     		str	r2, [r3]
 317:main.c        ****         /* Wait until component is ready to send data to host. */
 318:main.c        ****         while (0u == USBUART_CDCIsReady())
 673              		.loc 1 318 0
 674 00e2 00BF     		nop
 675              	.L41:
 676              		.loc 1 318 0 is_stmt 0 discriminator 1
 677 00e4 FFF7FEFF 		bl	USBUART_CDCIsReady
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 19


 678 00e8 0346     		mov	r3, r0
 679 00ea 002B     		cmp	r3, #0
 680 00ec FAD0     		beq	.L41
 319:main.c        ****         {
 320:main.c        ****         }
 321:main.c        ****         USBUART_PutString("Error. Please enter a number UP TO 127");
 681              		.loc 1 321 0 is_stmt 1
 682 00ee 1E48     		ldr	r0, .L46+24
 683 00f0 FFF7FEFF 		bl	USBUART_PutString
 322:main.c        ****         /* Wait until component is ready to send data to host. */
 323:main.c        ****         while (0u == USBUART_CDCIsReady())
 684              		.loc 1 323 0
 685 00f4 00BF     		nop
 686              	.L42:
 687              		.loc 1 323 0 is_stmt 0 discriminator 1
 688 00f6 FFF7FEFF 		bl	USBUART_CDCIsReady
 689 00fa 0346     		mov	r3, r0
 690 00fc 002B     		cmp	r3, #0
 691 00fe FAD0     		beq	.L42
 324:main.c        ****         {
 325:main.c        ****         }
 326:main.c        ****         USBUART_PutCRLF();
 692              		.loc 1 326 0 is_stmt 1
 693 0100 FFF7FEFF 		bl	USBUART_PutCRLF
 694              	.L40:
 327:main.c        ****     }
 328:main.c        ****     /* reset array */
 329:main.c        ****     data[0] = 0; 
 695              		.loc 1 329 0
 696 0104 134B     		ldr	r3, .L46+4
 697 0106 0022     		movs	r2, #0
 698 0108 1A70     		strb	r2, [r3]
 330:main.c        ****     data[1] = 0;
 699              		.loc 1 330 0
 700 010a 124B     		ldr	r3, .L46+4
 701 010c 0022     		movs	r2, #0
 702 010e 5A70     		strb	r2, [r3, #1]
 331:main.c        ****     data[2] = 0;
 703              		.loc 1 331 0
 704 0110 104B     		ldr	r3, .L46+4
 705 0112 0022     		movs	r2, #0
 706 0114 9A70     		strb	r2, [r3, #2]
 332:main.c        ****     i = 2; // reset indexing for array
 707              		.loc 1 332 0
 708 0116 154B     		ldr	r3, .L46+28
 709 0118 0222     		movs	r2, #2
 710 011a 1A60     		str	r2, [r3]
 333:main.c        ****     endFlag = 0; // reset endFlag for gathering new data
 711              		.loc 1 333 0
 712 011c 144B     		ldr	r3, .L46+32
 713 011e 0022     		movs	r2, #0
 714 0120 1A60     		str	r2, [r3]
 334:main.c        ****                     
 335:main.c        ****     if(error == 1){
 715              		.loc 1 335 0
 716 0122 0F4B     		ldr	r3, .L46+16
 717 0124 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 20


 718 0126 012B     		cmp	r3, #1
 719 0128 05D1     		bne	.L43
 336:main.c        ****         error = 0; // reset error checking
 720              		.loc 1 336 0
 721 012a 0D4B     		ldr	r3, .L46+16
 722 012c 0022     		movs	r2, #0
 723 012e 1A60     		str	r2, [r3]
 337:main.c        ****         return ERROR;
 724              		.loc 1 337 0
 725 0130 40F24D13 		movw	r3, #333
 726 0134 07E0     		b	.L44
 727              	.L43:
 338:main.c        ****     }
 339:main.c        ****     else if(dataDone == FALSE){
 728              		.loc 1 339 0
 729 0136 094B     		ldr	r3, .L46+12
 730 0138 1B68     		ldr	r3, [r3]
 731 013a 002B     		cmp	r3, #0
 732 013c 02D1     		bne	.L45
 340:main.c        ****         return ERROR;
 733              		.loc 1 340 0
 734 013e 40F24D13 		movw	r3, #333
 735 0142 00E0     		b	.L44
 736              	.L45:
 341:main.c        ****     }else{
 342:main.c        ****         //prompt = TRUE;
 343:main.c        ****         return crabs;
 737              		.loc 1 343 0
 738 0144 7B68     		ldr	r3, [r7, #4]
 739              	.L44:
 344:main.c        ****     }
 345:main.c        **** } /* END OF CalculateCrabs() */
 740              		.loc 1 345 0
 741 0146 1846     		mov	r0, r3
 742 0148 0837     		adds	r7, r7, #8
 743              		.cfi_def_cfa_offset 8
 744 014a BD46     		mov	sp, r7
 745              		.cfi_def_cfa_register 13
 746              		@ sp needed
 747 014c 80BD     		pop	{r7, pc}
 748              	.L47:
 749 014e 00BF     		.align	2
 750              	.L46:
 751 0150 00000000 		.word	oneDigit
 752 0154 00000000 		.word	data
 753 0158 00000000 		.word	twoDigit
 754 015c 00000000 		.word	dataDone
 755 0160 00000000 		.word	error
 756 0164 CC000000 		.word	.LC7
 757 0168 EC000000 		.word	.LC8
 758 016c 00000000 		.word	i
 759 0170 00000000 		.word	endFlag
 760              		.cfi_endproc
 761              	.LFE66:
 762              		.size	CalculateCrabs, .-CalculateCrabs
 763              		.section	.rodata
 764 0113 00       		.align	2
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 21


 765              	.LC9:
 766 0114 20202020 		.ascii	"           \000"
 766      20202020 
 766      20202000 
 767              		.align	2
 768              	.LC10:
 769 0120 43726162 		.ascii	"Crabs: %d\000"
 769      733A2025 
 769      6400
 770              		.section	.text.DisplayCrabs,"ax",%progbits
 771              		.align	2
 772              		.global	DisplayCrabs
 773              		.thumb
 774              		.thumb_func
 775              		.type	DisplayCrabs, %function
 776              	DisplayCrabs:
 777              	.LFB67:
 346:main.c        **** 
 347:main.c        **** /*******************************************************************************************
 348:main.c        ****  * function: void DisplayCrabs()
 349:main.c        ****  * parameters: int crabs
 350:main.c        ****  * returns: void
 351:main.c        ****  * description: Displays the number of crabs on LCD Display
 352:main.c        ****  *******************************************************************************************
 353:main.c        ****  */
 354:main.c        **** void DisplayCrabs(int crabs){
 778              		.loc 1 354 0
 779              		.cfi_startproc
 780              		@ args = 0, pretend = 0, frame = 8
 781              		@ frame_needed = 1, uses_anonymous_args = 0
 782 0000 80B5     		push	{r7, lr}
 783              		.cfi_def_cfa_offset 8
 784              		.cfi_offset 7, -8
 785              		.cfi_offset 14, -4
 786 0002 82B0     		sub	sp, sp, #8
 787              		.cfi_def_cfa_offset 16
 788 0004 00AF     		add	r7, sp, #0
 789              		.cfi_def_cfa_register 7
 790 0006 7860     		str	r0, [r7, #4]
 355:main.c        ****     /* Clear LCD line. */
 356:main.c        ****     LCD_Position(0u, 0u);
 791              		.loc 1 356 0
 792 0008 0021     		movs	r1, #0
 793 000a 0020     		movs	r0, #0
 794 000c FFF7FEFF 		bl	LCD_Position
 357:main.c        ****     LCD_PrintString("           ");
 795              		.loc 1 357 0
 796 0010 0948     		ldr	r0, .L49
 797 0012 FFF7FEFF 		bl	LCD_PrintString
 358:main.c        ****     /* Reset LCD line position. */
 359:main.c        ****     LCD_Position(0u, 0u);
 798              		.loc 1 359 0
 799 0016 0021     		movs	r1, #0
 800 0018 0020     		movs	r0, #0
 801 001a FFF7FEFF 		bl	LCD_Position
 360:main.c        ****     /* Store int crabs into a string to print to LCD */
 361:main.c        ****     sprintf(lineStr,"Crabs: %d", crabs);
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 22


 802              		.loc 1 361 0
 803 001e 7A68     		ldr	r2, [r7, #4]
 804 0020 0649     		ldr	r1, .L49+4
 805 0022 0748     		ldr	r0, .L49+8
 806 0024 FFF7FEFF 		bl	sprintf
 362:main.c        ****     LCD_PrintString(lineStr);
 807              		.loc 1 362 0
 808 0028 0548     		ldr	r0, .L49+8
 809 002a FFF7FEFF 		bl	LCD_PrintString
 363:main.c        **** }
 810              		.loc 1 363 0
 811 002e 00BF     		nop
 812 0030 0837     		adds	r7, r7, #8
 813              		.cfi_def_cfa_offset 8
 814 0032 BD46     		mov	sp, r7
 815              		.cfi_def_cfa_register 13
 816              		@ sp needed
 817 0034 80BD     		pop	{r7, pc}
 818              	.L50:
 819 0036 00BF     		.align	2
 820              	.L49:
 821 0038 14010000 		.word	.LC9
 822 003c 20010000 		.word	.LC10
 823 0040 00000000 		.word	lineStr
 824              		.cfi_endproc
 825              	.LFE67:
 826              		.size	DisplayCrabs, .-DisplayCrabs
 827              		.section	.text.tx_done,"ax",%progbits
 828              		.align	2
 829              		.global	tx_done
 830              		.thumb
 831              		.thumb_func
 832              		.type	tx_done, %function
 833              	tx_done:
 834              	.LFB68:
 364:main.c        **** 
 365:main.c        **** /*******************************************************************************
 366:main.c        **** * Function Name: wakeUpIsr
 367:main.c        **** ********************************************************************************
 368:main.c        **** *
 369:main.c        **** * Summary:
 370:main.c        **** * Sleep Timer interrupt to wake up PSoC from sleep
 371:main.c        **** *
 372:main.c        **** * Parameters:
 373:main.c        **** *  None.
 374:main.c        **** *
 375:main.c        **** * Return:
 376:main.c        **** *  None.
 377:main.c        **** *
 378:main.c        **** *******************************************************************************/
 379:main.c        **** CY_ISR(tx_done){
 835              		.loc 1 379 0
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 0
 838              		@ frame_needed = 1, uses_anonymous_args = 0
 839 0000 80B5     		push	{r7, lr}
 840              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 23


 841              		.cfi_offset 7, -8
 842              		.cfi_offset 14, -4
 843 0002 00AF     		add	r7, sp, #0
 844              		.cfi_def_cfa_register 7
 380:main.c        ****     countTx++; // every 1.024 seconds
 845              		.loc 1 380 0
 846 0004 0B4B     		ldr	r3, .L54
 847 0006 1B88     		ldrh	r3, [r3]
 848 0008 0133     		adds	r3, r3, #1
 849 000a 9AB2     		uxth	r2, r3
 850 000c 094B     		ldr	r3, .L54
 851 000e 1A80     		strh	r2, [r3]	@ movhi
 381:main.c        ****     if(countTx >= WAITTIME){
 852              		.loc 1 381 0
 853 0010 084B     		ldr	r3, .L54
 854 0012 1B88     		ldrh	r3, [r3]
 855 0014 4F2B     		cmp	r3, #79
 856 0016 0AD9     		bls	.L53
 382:main.c        ****         dataDone = TRUE;
 857              		.loc 1 382 0
 858 0018 074B     		ldr	r3, .L54+4
 859 001a 0122     		movs	r2, #1
 860 001c 1A60     		str	r2, [r3]
 383:main.c        ****         sendReady = TRUE;
 861              		.loc 1 383 0
 862 001e 074B     		ldr	r3, .L54+8
 863 0020 0122     		movs	r2, #1
 864 0022 1A60     		str	r2, [r3]
 384:main.c        **** 
 385:main.c        ****         countTx = 0;
 865              		.loc 1 385 0
 866 0024 034B     		ldr	r3, .L54
 867 0026 0022     		movs	r2, #0
 868 0028 1A80     		strh	r2, [r3]	@ movhi
 386:main.c        ****         Data_Timer_Stop();
 869              		.loc 1 386 0
 870 002a FFF7FEFF 		bl	Data_Timer_Stop
 871              	.L53:
 387:main.c        ****     }
 388:main.c        **** 
 389:main.c        **** } //end CY_ISR(tx_done)
 872              		.loc 1 389 0
 873 002e 00BF     		nop
 874 0030 80BD     		pop	{r7, pc}
 875              	.L55:
 876 0032 00BF     		.align	2
 877              	.L54:
 878 0034 00000000 		.word	countTx
 879 0038 00000000 		.word	dataDone
 880 003c 00000000 		.word	sendReady
 881              		.cfi_endproc
 882              	.LFE68:
 883              		.size	tx_done, .-tx_done
 884              		.text
 885              	.Letext0:
 886              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 887              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 24


 888              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 889              		.file 5 "Generated_Source\\PSoC5/core_cm3.h"
 890              		.section	.debug_info,"",%progbits
 891              	.Ldebug_info0:
 892 0000 A1020000 		.4byte	0x2a1
 893 0004 0400     		.2byte	0x4
 894 0006 00000000 		.4byte	.Ldebug_abbrev0
 895 000a 04       		.byte	0x4
 896 000b 01       		.uleb128 0x1
 897 000c 00000000 		.4byte	.LASF38
 898 0010 0C       		.byte	0xc
 899 0011 FB010000 		.4byte	.LASF39
 900 0015 88010000 		.4byte	.LASF40
 901 0019 00000000 		.4byte	.Ldebug_ranges0+0
 902 001d 00000000 		.4byte	0
 903 0021 00000000 		.4byte	.Ldebug_line0
 904 0025 02       		.uleb128 0x2
 905 0026 01       		.byte	0x1
 906 0027 06       		.byte	0x6
 907 0028 39020000 		.4byte	.LASF0
 908 002c 02       		.uleb128 0x2
 909 002d 01       		.byte	0x1
 910 002e 08       		.byte	0x8
 911 002f E6000000 		.4byte	.LASF1
 912 0033 02       		.uleb128 0x2
 913 0034 02       		.byte	0x2
 914 0035 05       		.byte	0x5
 915 0036 0D020000 		.4byte	.LASF2
 916 003a 02       		.uleb128 0x2
 917 003b 02       		.byte	0x2
 918 003c 07       		.byte	0x7
 919 003d 02010000 		.4byte	.LASF3
 920 0041 03       		.uleb128 0x3
 921 0042 A6000000 		.4byte	.LASF9
 922 0046 02       		.byte	0x2
 923 0047 3F       		.byte	0x3f
 924 0048 4C000000 		.4byte	0x4c
 925 004c 02       		.uleb128 0x2
 926 004d 04       		.byte	0x4
 927 004e 05       		.byte	0x5
 928 004f 24020000 		.4byte	.LASF4
 929 0053 02       		.uleb128 0x2
 930 0054 04       		.byte	0x4
 931 0055 07       		.byte	0x7
 932 0056 22010000 		.4byte	.LASF5
 933 005a 02       		.uleb128 0x2
 934 005b 08       		.byte	0x8
 935 005c 05       		.byte	0x5
 936 005d ED010000 		.4byte	.LASF6
 937 0061 02       		.uleb128 0x2
 938 0062 08       		.byte	0x8
 939 0063 07       		.byte	0x7
 940 0064 71010000 		.4byte	.LASF7
 941 0068 04       		.uleb128 0x4
 942 0069 04       		.byte	0x4
 943 006a 05       		.byte	0x5
 944 006b 696E7400 		.ascii	"int\000"
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 25


 945 006f 02       		.uleb128 0x2
 946 0070 04       		.byte	0x4
 947 0071 07       		.byte	0x7
 948 0072 64010000 		.4byte	.LASF8
 949 0076 03       		.uleb128 0x3
 950 0077 CA010000 		.4byte	.LASF10
 951 007b 03       		.byte	0x3
 952 007c 2C       		.byte	0x2c
 953 007d 41000000 		.4byte	0x41
 954 0081 05       		.uleb128 0x5
 955 0082 1E020000 		.4byte	.LASF11
 956 0086 04       		.byte	0x4
 957 0087 9201     		.2byte	0x192
 958 0089 2C000000 		.4byte	0x2c
 959 008d 05       		.uleb128 0x5
 960 008e 4B010000 		.4byte	.LASF12
 961 0092 04       		.byte	0x4
 962 0093 9301     		.2byte	0x193
 963 0095 3A000000 		.4byte	0x3a
 964 0099 02       		.uleb128 0x2
 965 009a 04       		.byte	0x4
 966 009b 04       		.byte	0x4
 967 009c DB000000 		.4byte	.LASF13
 968 00a0 02       		.uleb128 0x2
 969 00a1 08       		.byte	0x8
 970 00a2 04       		.byte	0x4
 971 00a3 B9000000 		.4byte	.LASF14
 972 00a7 05       		.uleb128 0x5
 973 00a8 F4000000 		.4byte	.LASF15
 974 00ac 04       		.byte	0x4
 975 00ad A301     		.2byte	0x1a3
 976 00af B3000000 		.4byte	0xb3
 977 00b3 02       		.uleb128 0x2
 978 00b4 01       		.byte	0x1
 979 00b5 08       		.byte	0x8
 980 00b6 02020000 		.4byte	.LASF16
 981 00ba 02       		.uleb128 0x2
 982 00bb 08       		.byte	0x8
 983 00bc 04       		.byte	0x4
 984 00bd 2D020000 		.4byte	.LASF17
 985 00c1 02       		.uleb128 0x2
 986 00c2 04       		.byte	0x4
 987 00c3 07       		.byte	0x7
 988 00c4 D2010000 		.4byte	.LASF18
 989 00c8 06       		.uleb128 0x6
 990 00c9 5F010000 		.4byte	.LASF23
 991 00cd 01       		.byte	0x1
 992 00ce 5E       		.byte	0x5e
 993 00cf 68000000 		.4byte	0x68
 994 00d3 00000000 		.4byte	.LFB64
 995 00d7 F8000000 		.4byte	.LFE64-.LFB64
 996 00db 01       		.uleb128 0x1
 997 00dc 9C       		.byte	0x9c
 998 00dd FE000000 		.4byte	0xfe
 999 00e1 07       		.uleb128 0x7
 1000 00e2 34010000 		.4byte	.LASF19
 1001 00e6 01       		.byte	0x1
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 26


 1002 00e7 60       		.byte	0x60
 1003 00e8 68000000 		.4byte	0x68
 1004 00ec 02       		.uleb128 0x2
 1005 00ed 91       		.byte	0x91
 1006 00ee 74       		.sleb128 -12
 1007 00ef 07       		.uleb128 0x7
 1008 00f0 DB010000 		.4byte	.LASF20
 1009 00f4 01       		.byte	0x1
 1010 00f5 61       		.byte	0x61
 1011 00f6 68000000 		.4byte	0x68
 1012 00fa 02       		.uleb128 0x2
 1013 00fb 91       		.byte	0x91
 1014 00fc 70       		.sleb128 -16
 1015 00fd 00       		.byte	0
 1016 00fe 08       		.uleb128 0x8
 1017 00ff 42010000 		.4byte	.LASF21
 1018 0103 01       		.byte	0x1
 1019 0104 A7       		.byte	0xa7
 1020 0105 68000000 		.4byte	0x68
 1021 0109 00000000 		.4byte	.LFB65
 1022 010d 5C010000 		.4byte	.LFE65-.LFB65
 1023 0111 01       		.uleb128 0x1
 1024 0112 9C       		.byte	0x9c
 1025 0113 26010000 		.4byte	0x126
 1026 0117 07       		.uleb128 0x7
 1027 0118 34010000 		.4byte	.LASF19
 1028 011c 01       		.byte	0x1
 1029 011d A9       		.byte	0xa9
 1030 011e 8D000000 		.4byte	0x8d
 1031 0122 02       		.uleb128 0x2
 1032 0123 91       		.byte	0x91
 1033 0124 6E       		.sleb128 -18
 1034 0125 00       		.byte	0
 1035 0126 09       		.uleb128 0x9
 1036 0127 97000000 		.4byte	.LASF22
 1037 012b 01       		.byte	0x1
 1038 012c 1301     		.2byte	0x113
 1039 012e 68000000 		.4byte	0x68
 1040 0132 00000000 		.4byte	.LFB66
 1041 0136 74010000 		.4byte	.LFE66-.LFB66
 1042 013a 01       		.uleb128 0x1
 1043 013b 9C       		.byte	0x9c
 1044 013c 50010000 		.4byte	0x150
 1045 0140 0A       		.uleb128 0xa
 1046 0141 34010000 		.4byte	.LASF19
 1047 0145 01       		.byte	0x1
 1048 0146 1501     		.2byte	0x115
 1049 0148 68000000 		.4byte	0x68
 1050 014c 02       		.uleb128 0x2
 1051 014d 91       		.byte	0x91
 1052 014e 74       		.sleb128 -12
 1053 014f 00       		.byte	0
 1054 0150 0B       		.uleb128 0xb
 1055 0151 52010000 		.4byte	.LASF24
 1056 0155 01       		.byte	0x1
 1057 0156 6201     		.2byte	0x162
 1058 0158 00000000 		.4byte	.LFB67
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 27


 1059 015c 44000000 		.4byte	.LFE67-.LFB67
 1060 0160 01       		.uleb128 0x1
 1061 0161 9C       		.byte	0x9c
 1062 0162 76010000 		.4byte	0x176
 1063 0166 0C       		.uleb128 0xc
 1064 0167 34010000 		.4byte	.LASF19
 1065 016b 01       		.byte	0x1
 1066 016c 6201     		.2byte	0x162
 1067 016e 68000000 		.4byte	0x68
 1068 0172 02       		.uleb128 0x2
 1069 0173 91       		.byte	0x91
 1070 0174 74       		.sleb128 -12
 1071 0175 00       		.byte	0
 1072 0176 0D       		.uleb128 0xd
 1073 0177 4C020000 		.4byte	.LASF41
 1074 017b 01       		.byte	0x1
 1075 017c 7B01     		.2byte	0x17b
 1076 017e 00000000 		.4byte	.LFB68
 1077 0182 40000000 		.4byte	.LFE68-.LFB68
 1078 0186 01       		.uleb128 0x1
 1079 0187 9C       		.byte	0x9c
 1080 0188 0E       		.uleb128 0xe
 1081 0189 15010000 		.4byte	.LASF25
 1082 018d 05       		.byte	0x5
 1083 018e 1207     		.2byte	0x712
 1084 0190 94010000 		.4byte	0x194
 1085 0194 0F       		.uleb128 0xf
 1086 0195 76000000 		.4byte	0x76
 1087 0199 10       		.uleb128 0x10
 1088 019a 45020000 		.4byte	.LASF26
 1089 019e 01       		.byte	0x1
 1090 019f 4B       		.byte	0x4b
 1091 01a0 68000000 		.4byte	0x68
 1092 01a4 05       		.uleb128 0x5
 1093 01a5 03       		.byte	0x3
 1094 01a6 00000000 		.4byte	prompt
 1095 01aa 10       		.uleb128 0x10
 1096 01ab 3A010000 		.4byte	.LASF27
 1097 01af 01       		.byte	0x1
 1098 01b0 4C       		.byte	0x4c
 1099 01b1 68000000 		.4byte	0x68
 1100 01b5 05       		.uleb128 0x5
 1101 01b6 03       		.byte	0x3
 1102 01b7 00000000 		.4byte	endFlag
 1103 01bb 10       		.uleb128 0x10
 1104 01bc 8E000000 		.4byte	.LASF28
 1105 01c0 01       		.byte	0x1
 1106 01c1 4D       		.byte	0x4d
 1107 01c2 68000000 		.4byte	0x68
 1108 01c6 05       		.uleb128 0x5
 1109 01c7 03       		.byte	0x3
 1110 01c8 00000000 		.4byte	oneDigit
 1111 01cc 10       		.uleb128 0x10
 1112 01cd B0000000 		.4byte	.LASF29
 1113 01d1 01       		.byte	0x1
 1114 01d2 4E       		.byte	0x4e
 1115 01d3 68000000 		.4byte	0x68
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 28


 1116 01d7 05       		.uleb128 0x5
 1117 01d8 03       		.byte	0x3
 1118 01d9 00000000 		.4byte	twoDigit
 1119 01dd 10       		.uleb128 0x10
 1120 01de E7010000 		.4byte	.LASF30
 1121 01e2 01       		.byte	0x1
 1122 01e3 4F       		.byte	0x4f
 1123 01e4 68000000 		.4byte	0x68
 1124 01e8 05       		.uleb128 0x5
 1125 01e9 03       		.byte	0x3
 1126 01ea 00000000 		.4byte	error
 1127 01ee 11       		.uleb128 0x11
 1128 01ef 6900     		.ascii	"i\000"
 1129 01f1 01       		.byte	0x1
 1130 01f2 50       		.byte	0x50
 1131 01f3 68000000 		.4byte	0x68
 1132 01f7 05       		.uleb128 0x5
 1133 01f8 03       		.byte	0x3
 1134 01f9 00000000 		.4byte	i
 1135 01fd 10       		.uleb128 0x10
 1136 01fe C0000000 		.4byte	.LASF31
 1137 0202 01       		.byte	0x1
 1138 0203 51       		.byte	0x51
 1139 0204 68000000 		.4byte	0x68
 1140 0208 05       		.uleb128 0x5
 1141 0209 03       		.byte	0x3
 1142 020a 00000000 		.4byte	dataDone
 1143 020e 10       		.uleb128 0x10
 1144 020f D1000000 		.4byte	.LASF32
 1145 0213 01       		.byte	0x1
 1146 0214 52       		.byte	0x52
 1147 0215 68000000 		.4byte	0x68
 1148 0219 05       		.uleb128 0x5
 1149 021a 03       		.byte	0x3
 1150 021b 00000000 		.4byte	sendReady
 1151 021f 10       		.uleb128 0x10
 1152 0220 07020000 		.4byte	.LASF33
 1153 0224 01       		.byte	0x1
 1154 0225 53       		.byte	0x53
 1155 0226 8D000000 		.4byte	0x8d
 1156 022a 05       		.uleb128 0x5
 1157 022b 03       		.byte	0x3
 1158 022c 00000000 		.4byte	count
 1159 0230 10       		.uleb128 0x10
 1160 0231 FA000000 		.4byte	.LASF34
 1161 0235 01       		.byte	0x1
 1162 0236 54       		.byte	0x54
 1163 0237 8D000000 		.4byte	0x8d
 1164 023b 05       		.uleb128 0x5
 1165 023c 03       		.byte	0x3
 1166 023d 00000000 		.4byte	countTx
 1167 0241 12       		.uleb128 0x12
 1168 0242 A7000000 		.4byte	0xa7
 1169 0246 51020000 		.4byte	0x251
 1170 024a 13       		.uleb128 0x13
 1171 024b C1000000 		.4byte	0xc1
 1172 024f 13       		.byte	0x13
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 29


 1173 0250 00       		.byte	0
 1174 0251 10       		.uleb128 0x10
 1175 0252 C9000000 		.4byte	.LASF35
 1176 0256 01       		.byte	0x1
 1177 0257 55       		.byte	0x55
 1178 0258 41020000 		.4byte	0x241
 1179 025c 05       		.uleb128 0x5
 1180 025d 03       		.byte	0x3
 1181 025e 00000000 		.4byte	lineStr
 1182 0262 12       		.uleb128 0x12
 1183 0263 81000000 		.4byte	0x81
 1184 0267 72020000 		.4byte	0x272
 1185 026b 13       		.uleb128 0x13
 1186 026c C1000000 		.4byte	0xc1
 1187 0270 3F       		.byte	0x3f
 1188 0271 00       		.byte	0
 1189 0272 10       		.uleb128 0x10
 1190 0273 17020000 		.4byte	.LASF36
 1191 0277 01       		.byte	0x1
 1192 0278 56       		.byte	0x56
 1193 0279 62020000 		.4byte	0x262
 1194 027d 05       		.uleb128 0x5
 1195 027e 03       		.byte	0x3
 1196 027f 00000000 		.4byte	buffer
 1197 0283 12       		.uleb128 0x12
 1198 0284 81000000 		.4byte	0x81
 1199 0288 93020000 		.4byte	0x293
 1200 028c 13       		.uleb128 0x13
 1201 028d C1000000 		.4byte	0xc1
 1202 0291 02       		.byte	0x2
 1203 0292 00       		.byte	0
 1204 0293 10       		.uleb128 0x10
 1205 0294 E1000000 		.4byte	.LASF37
 1206 0298 01       		.byte	0x1
 1207 0299 57       		.byte	0x57
 1208 029a 83020000 		.4byte	0x283
 1209 029e 05       		.uleb128 0x5
 1210 029f 03       		.byte	0x3
 1211 02a0 00000000 		.4byte	data
 1212 02a4 00       		.byte	0
 1213              		.section	.debug_abbrev,"",%progbits
 1214              	.Ldebug_abbrev0:
 1215 0000 01       		.uleb128 0x1
 1216 0001 11       		.uleb128 0x11
 1217 0002 01       		.byte	0x1
 1218 0003 25       		.uleb128 0x25
 1219 0004 0E       		.uleb128 0xe
 1220 0005 13       		.uleb128 0x13
 1221 0006 0B       		.uleb128 0xb
 1222 0007 03       		.uleb128 0x3
 1223 0008 0E       		.uleb128 0xe
 1224 0009 1B       		.uleb128 0x1b
 1225 000a 0E       		.uleb128 0xe
 1226 000b 55       		.uleb128 0x55
 1227 000c 17       		.uleb128 0x17
 1228 000d 11       		.uleb128 0x11
 1229 000e 01       		.uleb128 0x1
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 30


 1230 000f 10       		.uleb128 0x10
 1231 0010 17       		.uleb128 0x17
 1232 0011 00       		.byte	0
 1233 0012 00       		.byte	0
 1234 0013 02       		.uleb128 0x2
 1235 0014 24       		.uleb128 0x24
 1236 0015 00       		.byte	0
 1237 0016 0B       		.uleb128 0xb
 1238 0017 0B       		.uleb128 0xb
 1239 0018 3E       		.uleb128 0x3e
 1240 0019 0B       		.uleb128 0xb
 1241 001a 03       		.uleb128 0x3
 1242 001b 0E       		.uleb128 0xe
 1243 001c 00       		.byte	0
 1244 001d 00       		.byte	0
 1245 001e 03       		.uleb128 0x3
 1246 001f 16       		.uleb128 0x16
 1247 0020 00       		.byte	0
 1248 0021 03       		.uleb128 0x3
 1249 0022 0E       		.uleb128 0xe
 1250 0023 3A       		.uleb128 0x3a
 1251 0024 0B       		.uleb128 0xb
 1252 0025 3B       		.uleb128 0x3b
 1253 0026 0B       		.uleb128 0xb
 1254 0027 49       		.uleb128 0x49
 1255 0028 13       		.uleb128 0x13
 1256 0029 00       		.byte	0
 1257 002a 00       		.byte	0
 1258 002b 04       		.uleb128 0x4
 1259 002c 24       		.uleb128 0x24
 1260 002d 00       		.byte	0
 1261 002e 0B       		.uleb128 0xb
 1262 002f 0B       		.uleb128 0xb
 1263 0030 3E       		.uleb128 0x3e
 1264 0031 0B       		.uleb128 0xb
 1265 0032 03       		.uleb128 0x3
 1266 0033 08       		.uleb128 0x8
 1267 0034 00       		.byte	0
 1268 0035 00       		.byte	0
 1269 0036 05       		.uleb128 0x5
 1270 0037 16       		.uleb128 0x16
 1271 0038 00       		.byte	0
 1272 0039 03       		.uleb128 0x3
 1273 003a 0E       		.uleb128 0xe
 1274 003b 3A       		.uleb128 0x3a
 1275 003c 0B       		.uleb128 0xb
 1276 003d 3B       		.uleb128 0x3b
 1277 003e 05       		.uleb128 0x5
 1278 003f 49       		.uleb128 0x49
 1279 0040 13       		.uleb128 0x13
 1280 0041 00       		.byte	0
 1281 0042 00       		.byte	0
 1282 0043 06       		.uleb128 0x6
 1283 0044 2E       		.uleb128 0x2e
 1284 0045 01       		.byte	0x1
 1285 0046 3F       		.uleb128 0x3f
 1286 0047 19       		.uleb128 0x19
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 31


 1287 0048 03       		.uleb128 0x3
 1288 0049 0E       		.uleb128 0xe
 1289 004a 3A       		.uleb128 0x3a
 1290 004b 0B       		.uleb128 0xb
 1291 004c 3B       		.uleb128 0x3b
 1292 004d 0B       		.uleb128 0xb
 1293 004e 49       		.uleb128 0x49
 1294 004f 13       		.uleb128 0x13
 1295 0050 11       		.uleb128 0x11
 1296 0051 01       		.uleb128 0x1
 1297 0052 12       		.uleb128 0x12
 1298 0053 06       		.uleb128 0x6
 1299 0054 40       		.uleb128 0x40
 1300 0055 18       		.uleb128 0x18
 1301 0056 9642     		.uleb128 0x2116
 1302 0058 19       		.uleb128 0x19
 1303 0059 01       		.uleb128 0x1
 1304 005a 13       		.uleb128 0x13
 1305 005b 00       		.byte	0
 1306 005c 00       		.byte	0
 1307 005d 07       		.uleb128 0x7
 1308 005e 34       		.uleb128 0x34
 1309 005f 00       		.byte	0
 1310 0060 03       		.uleb128 0x3
 1311 0061 0E       		.uleb128 0xe
 1312 0062 3A       		.uleb128 0x3a
 1313 0063 0B       		.uleb128 0xb
 1314 0064 3B       		.uleb128 0x3b
 1315 0065 0B       		.uleb128 0xb
 1316 0066 49       		.uleb128 0x49
 1317 0067 13       		.uleb128 0x13
 1318 0068 02       		.uleb128 0x2
 1319 0069 18       		.uleb128 0x18
 1320 006a 00       		.byte	0
 1321 006b 00       		.byte	0
 1322 006c 08       		.uleb128 0x8
 1323 006d 2E       		.uleb128 0x2e
 1324 006e 01       		.byte	0x1
 1325 006f 3F       		.uleb128 0x3f
 1326 0070 19       		.uleb128 0x19
 1327 0071 03       		.uleb128 0x3
 1328 0072 0E       		.uleb128 0xe
 1329 0073 3A       		.uleb128 0x3a
 1330 0074 0B       		.uleb128 0xb
 1331 0075 3B       		.uleb128 0x3b
 1332 0076 0B       		.uleb128 0xb
 1333 0077 27       		.uleb128 0x27
 1334 0078 19       		.uleb128 0x19
 1335 0079 49       		.uleb128 0x49
 1336 007a 13       		.uleb128 0x13
 1337 007b 11       		.uleb128 0x11
 1338 007c 01       		.uleb128 0x1
 1339 007d 12       		.uleb128 0x12
 1340 007e 06       		.uleb128 0x6
 1341 007f 40       		.uleb128 0x40
 1342 0080 18       		.uleb128 0x18
 1343 0081 9642     		.uleb128 0x2116
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 32


 1344 0083 19       		.uleb128 0x19
 1345 0084 01       		.uleb128 0x1
 1346 0085 13       		.uleb128 0x13
 1347 0086 00       		.byte	0
 1348 0087 00       		.byte	0
 1349 0088 09       		.uleb128 0x9
 1350 0089 2E       		.uleb128 0x2e
 1351 008a 01       		.byte	0x1
 1352 008b 3F       		.uleb128 0x3f
 1353 008c 19       		.uleb128 0x19
 1354 008d 03       		.uleb128 0x3
 1355 008e 0E       		.uleb128 0xe
 1356 008f 3A       		.uleb128 0x3a
 1357 0090 0B       		.uleb128 0xb
 1358 0091 3B       		.uleb128 0x3b
 1359 0092 05       		.uleb128 0x5
 1360 0093 27       		.uleb128 0x27
 1361 0094 19       		.uleb128 0x19
 1362 0095 49       		.uleb128 0x49
 1363 0096 13       		.uleb128 0x13
 1364 0097 11       		.uleb128 0x11
 1365 0098 01       		.uleb128 0x1
 1366 0099 12       		.uleb128 0x12
 1367 009a 06       		.uleb128 0x6
 1368 009b 40       		.uleb128 0x40
 1369 009c 18       		.uleb128 0x18
 1370 009d 9642     		.uleb128 0x2116
 1371 009f 19       		.uleb128 0x19
 1372 00a0 01       		.uleb128 0x1
 1373 00a1 13       		.uleb128 0x13
 1374 00a2 00       		.byte	0
 1375 00a3 00       		.byte	0
 1376 00a4 0A       		.uleb128 0xa
 1377 00a5 34       		.uleb128 0x34
 1378 00a6 00       		.byte	0
 1379 00a7 03       		.uleb128 0x3
 1380 00a8 0E       		.uleb128 0xe
 1381 00a9 3A       		.uleb128 0x3a
 1382 00aa 0B       		.uleb128 0xb
 1383 00ab 3B       		.uleb128 0x3b
 1384 00ac 05       		.uleb128 0x5
 1385 00ad 49       		.uleb128 0x49
 1386 00ae 13       		.uleb128 0x13
 1387 00af 02       		.uleb128 0x2
 1388 00b0 18       		.uleb128 0x18
 1389 00b1 00       		.byte	0
 1390 00b2 00       		.byte	0
 1391 00b3 0B       		.uleb128 0xb
 1392 00b4 2E       		.uleb128 0x2e
 1393 00b5 01       		.byte	0x1
 1394 00b6 3F       		.uleb128 0x3f
 1395 00b7 19       		.uleb128 0x19
 1396 00b8 03       		.uleb128 0x3
 1397 00b9 0E       		.uleb128 0xe
 1398 00ba 3A       		.uleb128 0x3a
 1399 00bb 0B       		.uleb128 0xb
 1400 00bc 3B       		.uleb128 0x3b
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 33


 1401 00bd 05       		.uleb128 0x5
 1402 00be 27       		.uleb128 0x27
 1403 00bf 19       		.uleb128 0x19
 1404 00c0 11       		.uleb128 0x11
 1405 00c1 01       		.uleb128 0x1
 1406 00c2 12       		.uleb128 0x12
 1407 00c3 06       		.uleb128 0x6
 1408 00c4 40       		.uleb128 0x40
 1409 00c5 18       		.uleb128 0x18
 1410 00c6 9642     		.uleb128 0x2116
 1411 00c8 19       		.uleb128 0x19
 1412 00c9 01       		.uleb128 0x1
 1413 00ca 13       		.uleb128 0x13
 1414 00cb 00       		.byte	0
 1415 00cc 00       		.byte	0
 1416 00cd 0C       		.uleb128 0xc
 1417 00ce 05       		.uleb128 0x5
 1418 00cf 00       		.byte	0
 1419 00d0 03       		.uleb128 0x3
 1420 00d1 0E       		.uleb128 0xe
 1421 00d2 3A       		.uleb128 0x3a
 1422 00d3 0B       		.uleb128 0xb
 1423 00d4 3B       		.uleb128 0x3b
 1424 00d5 05       		.uleb128 0x5
 1425 00d6 49       		.uleb128 0x49
 1426 00d7 13       		.uleb128 0x13
 1427 00d8 02       		.uleb128 0x2
 1428 00d9 18       		.uleb128 0x18
 1429 00da 00       		.byte	0
 1430 00db 00       		.byte	0
 1431 00dc 0D       		.uleb128 0xd
 1432 00dd 2E       		.uleb128 0x2e
 1433 00de 00       		.byte	0
 1434 00df 3F       		.uleb128 0x3f
 1435 00e0 19       		.uleb128 0x19
 1436 00e1 03       		.uleb128 0x3
 1437 00e2 0E       		.uleb128 0xe
 1438 00e3 3A       		.uleb128 0x3a
 1439 00e4 0B       		.uleb128 0xb
 1440 00e5 3B       		.uleb128 0x3b
 1441 00e6 05       		.uleb128 0x5
 1442 00e7 27       		.uleb128 0x27
 1443 00e8 19       		.uleb128 0x19
 1444 00e9 11       		.uleb128 0x11
 1445 00ea 01       		.uleb128 0x1
 1446 00eb 12       		.uleb128 0x12
 1447 00ec 06       		.uleb128 0x6
 1448 00ed 40       		.uleb128 0x40
 1449 00ee 18       		.uleb128 0x18
 1450 00ef 9642     		.uleb128 0x2116
 1451 00f1 19       		.uleb128 0x19
 1452 00f2 00       		.byte	0
 1453 00f3 00       		.byte	0
 1454 00f4 0E       		.uleb128 0xe
 1455 00f5 34       		.uleb128 0x34
 1456 00f6 00       		.byte	0
 1457 00f7 03       		.uleb128 0x3
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 34


 1458 00f8 0E       		.uleb128 0xe
 1459 00f9 3A       		.uleb128 0x3a
 1460 00fa 0B       		.uleb128 0xb
 1461 00fb 3B       		.uleb128 0x3b
 1462 00fc 05       		.uleb128 0x5
 1463 00fd 49       		.uleb128 0x49
 1464 00fe 13       		.uleb128 0x13
 1465 00ff 3F       		.uleb128 0x3f
 1466 0100 19       		.uleb128 0x19
 1467 0101 3C       		.uleb128 0x3c
 1468 0102 19       		.uleb128 0x19
 1469 0103 00       		.byte	0
 1470 0104 00       		.byte	0
 1471 0105 0F       		.uleb128 0xf
 1472 0106 35       		.uleb128 0x35
 1473 0107 00       		.byte	0
 1474 0108 49       		.uleb128 0x49
 1475 0109 13       		.uleb128 0x13
 1476 010a 00       		.byte	0
 1477 010b 00       		.byte	0
 1478 010c 10       		.uleb128 0x10
 1479 010d 34       		.uleb128 0x34
 1480 010e 00       		.byte	0
 1481 010f 03       		.uleb128 0x3
 1482 0110 0E       		.uleb128 0xe
 1483 0111 3A       		.uleb128 0x3a
 1484 0112 0B       		.uleb128 0xb
 1485 0113 3B       		.uleb128 0x3b
 1486 0114 0B       		.uleb128 0xb
 1487 0115 49       		.uleb128 0x49
 1488 0116 13       		.uleb128 0x13
 1489 0117 3F       		.uleb128 0x3f
 1490 0118 19       		.uleb128 0x19
 1491 0119 02       		.uleb128 0x2
 1492 011a 18       		.uleb128 0x18
 1493 011b 00       		.byte	0
 1494 011c 00       		.byte	0
 1495 011d 11       		.uleb128 0x11
 1496 011e 34       		.uleb128 0x34
 1497 011f 00       		.byte	0
 1498 0120 03       		.uleb128 0x3
 1499 0121 08       		.uleb128 0x8
 1500 0122 3A       		.uleb128 0x3a
 1501 0123 0B       		.uleb128 0xb
 1502 0124 3B       		.uleb128 0x3b
 1503 0125 0B       		.uleb128 0xb
 1504 0126 49       		.uleb128 0x49
 1505 0127 13       		.uleb128 0x13
 1506 0128 3F       		.uleb128 0x3f
 1507 0129 19       		.uleb128 0x19
 1508 012a 02       		.uleb128 0x2
 1509 012b 18       		.uleb128 0x18
 1510 012c 00       		.byte	0
 1511 012d 00       		.byte	0
 1512 012e 12       		.uleb128 0x12
 1513 012f 01       		.uleb128 0x1
 1514 0130 01       		.byte	0x1
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 35


 1515 0131 49       		.uleb128 0x49
 1516 0132 13       		.uleb128 0x13
 1517 0133 01       		.uleb128 0x1
 1518 0134 13       		.uleb128 0x13
 1519 0135 00       		.byte	0
 1520 0136 00       		.byte	0
 1521 0137 13       		.uleb128 0x13
 1522 0138 21       		.uleb128 0x21
 1523 0139 00       		.byte	0
 1524 013a 49       		.uleb128 0x49
 1525 013b 13       		.uleb128 0x13
 1526 013c 2F       		.uleb128 0x2f
 1527 013d 0B       		.uleb128 0xb
 1528 013e 00       		.byte	0
 1529 013f 00       		.byte	0
 1530 0140 00       		.byte	0
 1531              		.section	.debug_aranges,"",%progbits
 1532 0000 3C000000 		.4byte	0x3c
 1533 0004 0200     		.2byte	0x2
 1534 0006 00000000 		.4byte	.Ldebug_info0
 1535 000a 04       		.byte	0x4
 1536 000b 00       		.byte	0
 1537 000c 0000     		.2byte	0
 1538 000e 0000     		.2byte	0
 1539 0010 00000000 		.4byte	.LFB64
 1540 0014 F8000000 		.4byte	.LFE64-.LFB64
 1541 0018 00000000 		.4byte	.LFB65
 1542 001c 5C010000 		.4byte	.LFE65-.LFB65
 1543 0020 00000000 		.4byte	.LFB66
 1544 0024 74010000 		.4byte	.LFE66-.LFB66
 1545 0028 00000000 		.4byte	.LFB67
 1546 002c 44000000 		.4byte	.LFE67-.LFB67
 1547 0030 00000000 		.4byte	.LFB68
 1548 0034 40000000 		.4byte	.LFE68-.LFB68
 1549 0038 00000000 		.4byte	0
 1550 003c 00000000 		.4byte	0
 1551              		.section	.debug_ranges,"",%progbits
 1552              	.Ldebug_ranges0:
 1553 0000 00000000 		.4byte	.LFB64
 1554 0004 F8000000 		.4byte	.LFE64
 1555 0008 00000000 		.4byte	.LFB65
 1556 000c 5C010000 		.4byte	.LFE65
 1557 0010 00000000 		.4byte	.LFB66
 1558 0014 74010000 		.4byte	.LFE66
 1559 0018 00000000 		.4byte	.LFB67
 1560 001c 44000000 		.4byte	.LFE67
 1561 0020 00000000 		.4byte	.LFB68
 1562 0024 40000000 		.4byte	.LFE68
 1563 0028 00000000 		.4byte	0
 1564 002c 00000000 		.4byte	0
 1565              		.section	.debug_line,"",%progbits
 1566              	.Ldebug_line0:
 1567 0000 7E020000 		.section	.debug_str,"MS",%progbits,1
 1567      02004C01 
 1567      00000201 
 1567      FB0E0D00 
 1567      01010101 
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 36


 1568              	.LASF38:
 1569 0000 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1569      43313120 
 1569      352E342E 
 1569      31203230 
 1569      31363036 
 1570 0033 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1570      20726576 
 1570      6973696F 
 1570      6E203233 
 1570      37373135 
 1571 0066 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1571      66756E63 
 1571      74696F6E 
 1571      2D736563 
 1571      74696F6E 
 1572              	.LASF28:
 1573 008e 6F6E6544 		.ascii	"oneDigit\000"
 1573      69676974 
 1573      00
 1574              	.LASF22:
 1575 0097 43616C63 		.ascii	"CalculateCrabs\000"
 1575      756C6174 
 1575      65437261 
 1575      627300
 1576              	.LASF9:
 1577 00a6 5F5F696E 		.ascii	"__int32_t\000"
 1577      7433325F 
 1577      7400
 1578              	.LASF29:
 1579 00b0 74776F44 		.ascii	"twoDigit\000"
 1579      69676974 
 1579      00
 1580              	.LASF14:
 1581 00b9 646F7562 		.ascii	"double\000"
 1581      6C6500
 1582              	.LASF31:
 1583 00c0 64617461 		.ascii	"dataDone\000"
 1583      446F6E65 
 1583      00
 1584              	.LASF35:
 1585 00c9 6C696E65 		.ascii	"lineStr\000"
 1585      53747200 
 1586              	.LASF32:
 1587 00d1 73656E64 		.ascii	"sendReady\000"
 1587      52656164 
 1587      7900
 1588              	.LASF13:
 1589 00db 666C6F61 		.ascii	"float\000"
 1589      7400
 1590              	.LASF37:
 1591 00e1 64617461 		.ascii	"data\000"
 1591      00
 1592              	.LASF1:
 1593 00e6 756E7369 		.ascii	"unsigned char\000"
 1593      676E6564 
 1593      20636861 
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 37


 1593      7200
 1594              	.LASF15:
 1595 00f4 63686172 		.ascii	"char8\000"
 1595      3800
 1596              	.LASF34:
 1597 00fa 636F756E 		.ascii	"countTx\000"
 1597      74547800 
 1598              	.LASF3:
 1599 0102 73686F72 		.ascii	"short unsigned int\000"
 1599      7420756E 
 1599      7369676E 
 1599      65642069 
 1599      6E7400
 1600              	.LASF25:
 1601 0115 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1601      52784275 
 1601      66666572 
 1601      00
 1602              	.LASF5:
 1603 0122 6C6F6E67 		.ascii	"long unsigned int\000"
 1603      20756E73 
 1603      69676E65 
 1603      6420696E 
 1603      7400
 1604              	.LASF19:
 1605 0134 63726162 		.ascii	"crabs\000"
 1605      7300
 1606              	.LASF27:
 1607 013a 656E6446 		.ascii	"endFlag\000"
 1607      6C616700 
 1608              	.LASF21:
 1609 0142 47657443 		.ascii	"GetCrabs\000"
 1609      72616273 
 1609      00
 1610              	.LASF12:
 1611 014b 75696E74 		.ascii	"uint16\000"
 1611      313600
 1612              	.LASF24:
 1613 0152 44697370 		.ascii	"DisplayCrabs\000"
 1613      6C617943 
 1613      72616273 
 1613      00
 1614              	.LASF23:
 1615 015f 6D61696E 		.ascii	"main\000"
 1615      00
 1616              	.LASF8:
 1617 0164 756E7369 		.ascii	"unsigned int\000"
 1617      676E6564 
 1617      20696E74 
 1617      00
 1618              	.LASF7:
 1619 0171 6C6F6E67 		.ascii	"long long unsigned int\000"
 1619      206C6F6E 
 1619      6720756E 
 1619      7369676E 
 1619      65642069 
 1620              	.LASF40:
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 38


 1621 0188 433A5C55 		.ascii	"C:\\Users\\sdysart\\Documents\\UACS\\UACS\\HighFreq"
 1621      73657273 
 1621      5C736479 
 1621      73617274 
 1621      5C446F63 
 1622 01b5 46534B5C 		.ascii	"FSK\\USBFS_UART.cydsn\000"
 1622      55534246 
 1622      535F5541 
 1622      52542E63 
 1622      7964736E 
 1623              	.LASF10:
 1624 01ca 696E7433 		.ascii	"int32_t\000"
 1624      325F7400 
 1625              	.LASF18:
 1626 01d2 73697A65 		.ascii	"sizetype\000"
 1626      74797065 
 1626      00
 1627              	.LASF20:
 1628 01db 67657474 		.ascii	"gettingData\000"
 1628      696E6744 
 1628      61746100 
 1629              	.LASF30:
 1630 01e7 6572726F 		.ascii	"error\000"
 1630      7200
 1631              	.LASF6:
 1632 01ed 6C6F6E67 		.ascii	"long long int\000"
 1632      206C6F6E 
 1632      6720696E 
 1632      7400
 1633              	.LASF39:
 1634 01fb 6D61696E 		.ascii	"main.c\000"
 1634      2E6300
 1635              	.LASF16:
 1636 0202 63686172 		.ascii	"char\000"
 1636      00
 1637              	.LASF33:
 1638 0207 636F756E 		.ascii	"count\000"
 1638      7400
 1639              	.LASF2:
 1640 020d 73686F72 		.ascii	"short int\000"
 1640      7420696E 
 1640      7400
 1641              	.LASF36:
 1642 0217 62756666 		.ascii	"buffer\000"
 1642      657200
 1643              	.LASF11:
 1644 021e 75696E74 		.ascii	"uint8\000"
 1644      3800
 1645              	.LASF4:
 1646 0224 6C6F6E67 		.ascii	"long int\000"
 1646      20696E74 
 1646      00
 1647              	.LASF17:
 1648 022d 6C6F6E67 		.ascii	"long double\000"
 1648      20646F75 
 1648      626C6500 
 1649              	.LASF0:
ARM GAS  C:\Users\sdysart\AppData\Local\Temp\ccMA1dxf.s 			page 39


 1650 0239 7369676E 		.ascii	"signed char\000"
 1650      65642063 
 1650      68617200 
 1651              	.LASF26:
 1652 0245 70726F6D 		.ascii	"prompt\000"
 1652      707400
 1653              	.LASF41:
 1654 024c 74785F64 		.ascii	"tx_done\000"
 1654      6F6E6500 
 1655              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
